
pr02-URCHydrophoneTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000566  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ea  00800100  00800100  000005fa  2**0
                  ALLOC
  3 .stab         000011f4  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000100c  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000027fc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00002810  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017c  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000028  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000b6  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	24 e0       	ldi	r18, 0x04	; 4
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 3e       	cpi	r26, 0xEA	; 234
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  88:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <CollectHydrophoneData>:
volatile int n;
volatile int out[500] = {0};


int *CollectHydrophoneData(int *buf, int size)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <CollectHydrophoneData+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <CollectHydrophoneData+0x8>
  98:	00 d0       	rcall	.+0      	; 0x9a <CollectHydrophoneData+0xa>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
  a2:	7e 83       	std	Y+6, r23	; 0x06
  a4:	6d 83       	std	Y+5, r22	; 0x05
	// initalize some variables
	ADCSRA |= 1<<ADIF; //a logical one clears this interuppt flag.
  a6:	8a e7       	ldi	r24, 0x7A	; 122
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	2a e7       	ldi	r18, 0x7A	; 122
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	f9 01       	movw	r30, r18
  b0:	20 81       	ld	r18, Z
  b2:	20 61       	ori	r18, 0x10	; 16
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	TIFR0 |= (1<<OCF0A);
  b8:	85 e3       	ldi	r24, 0x35	; 53
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	25 e3       	ldi	r18, 0x35	; 53
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	20 81       	ld	r18, Z
  c4:	22 60       	ori	r18, 0x02	; 2
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	n = 0;
  ca:	10 92 e9 04 	sts	0x04E9, r1
  ce:	10 92 e8 04 	sts	0x04E8, r1

	while ( ACSR & 1<<ACO )
  d2:	00 00       	nop
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	80 72       	andi	r24, 0x20	; 32
  e2:	99 27       	eor	r25, r25
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	b1 f7       	brne	.-20     	; 0xd4 <CollectHydrophoneData+0x44>
	{
		// do nothing
	}

	// enable interrupt functionality
	sei();
  e8:	78 94       	sei
	ADCSRA |= (0<<ADSC | 1<<ADIE | 1<<ADATE);
  ea:	8a e7       	ldi	r24, 0x7A	; 122
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2a e7       	ldi	r18, 0x7A	; 122
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	28 62       	ori	r18, 0x28	; 40
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18

	// hang inside a while loop untill ADC capture is finished
	//LED_PORT |= 1<<LED_PIN; LED_PORT &= ~(1<<LED_PIN);
	while(n<size) {}
  fc:	00 00       	nop
  fe:	20 91 e8 04 	lds	r18, 0x04E8
 102:	30 91 e9 04 	lds	r19, 0x04E9
 106:	8d 81       	ldd	r24, Y+5	; 0x05
 108:	9e 81       	ldd	r25, Y+6	; 0x06
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	bc f3       	brlt	.-18     	; 0xfe <CollectHydrophoneData+0x6e>

	// Disable interupt functionality
	ADC &= ~1<<ADIE;
 110:	88 e7       	ldi	r24, 0x78	; 120
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e7       	ldi	r18, 0x78	; 120
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	31 81       	ldd	r19, Z+1	; 0x01
 11e:	20 7f       	andi	r18, 0xF0	; 240
 120:	fc 01       	movw	r30, r24
 122:	31 83       	std	Z+1, r19	; 0x01
 124:	20 83       	st	Z, r18
	cli();
 126:	f8 94       	cli

	// Copy captured data to a register and return
	for(int i = 0; i < size; i++) {
 128:	1a 82       	std	Y+2, r1	; 0x02
 12a:	19 82       	std	Y+1, r1	; 0x01
 12c:	19 c0       	rjmp	.+50     	; 0x160 <CollectHydrophoneData+0xd0>
		buf[i] = out[i];
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	9a 81       	ldd	r25, Y+2	; 0x02
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	2b 81       	ldd	r18, Y+3	; 0x03
 138:	3c 81       	ldd	r19, Y+4	; 0x04
 13a:	82 0f       	add	r24, r18
 13c:	93 1f       	adc	r25, r19
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	3a 81       	ldd	r19, Y+2	; 0x02
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	20 50       	subi	r18, 0x00	; 0
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	31 81       	ldd	r19, Z+1	; 0x01
 150:	fc 01       	movw	r30, r24
 152:	31 83       	std	Z+1, r19	; 0x01
 154:	20 83       	st	Z, r18
	// Disable interupt functionality
	ADC &= ~1<<ADIE;
	cli();

	// Copy captured data to a register and return
	for(int i = 0; i < size; i++) {
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	29 81       	ldd	r18, Y+1	; 0x01
 162:	3a 81       	ldd	r19, Y+2	; 0x02
 164:	8d 81       	ldd	r24, Y+5	; 0x05
 166:	9e 81       	ldd	r25, Y+6	; 0x06
 168:	28 17       	cp	r18, r24
 16a:	39 07       	cpc	r19, r25
 16c:	04 f3       	brlt	.-64     	; 0x12e <CollectHydrophoneData+0x9e>
		buf[i] = out[i];
	}

	return buf;
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	9c 81       	ldd	r25, Y+4	; 0x04
}
 172:	26 96       	adiw	r28, 0x06	; 6
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <__vector_21>:




ISR(ADC_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	00 90 5f 00 	lds	r0, 0x005F
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	out[n] = ADCH;
 1a4:	80 91 e8 04 	lds	r24, 0x04E8
 1a8:	90 91 e9 04 	lds	r25, 0x04E9
 1ac:	29 e7       	ldi	r18, 0x79	; 121
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 81       	ld	r18, Z
 1b4:	22 2f       	mov	r18, r18
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	80 50       	subi	r24, 0x00	; 0
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	fc 01       	movw	r30, r24
 1c2:	31 83       	std	Z+1, r19	; 0x01
 1c4:	20 83       	st	Z, r18
	n++;
 1c6:	80 91 e8 04 	lds	r24, 0x04E8
 1ca:	90 91 e9 04 	lds	r25, 0x04E9
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 e9 04 	sts	0x04E9, r25
 1d4:	80 93 e8 04 	sts	0x04E8, r24
	 *  never occurs because this code uses the ADC's ISR instead. Since OCF0A is the
	 *  ADC's source of automated triggering, the ADC will IGNORE all conversion start
	 *  commands until the OCF0A is cleared. Hence is why there is a command to
	 *  clear OCF0A below.
	 */
	TIFR0 |= (1<<OCF0A);
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	25 e3       	ldi	r18, 0x35	; 53
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	22 60       	ori	r18, 0x02	; 2
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	00 92 5f 00 	sts	0x005F, r0
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <Hydrophone_Init>:


/* ************** LEVEL 2 ****************** */

void Hydrophone_Init()
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
 20e:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC_Init>
	Timer0_Init();
 212:	0e 94 28 01 	call	0x250	; 0x250 <Timer0_Init>
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <ADC_Init>:

/* ************** LEVEL 1 ****************** */

void ADC_Init()
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	//DIDR0 = 0x3E; //Leave only ADC0 active
	ADMUX = 0x60; //AVcc Reference, Left Adjusted, ADC0 Selected
 224:	8c e7       	ldi	r24, 0x7C	; 124
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	20 e6       	ldi	r18, 0x60	; 96
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
	ADCSRB |= 0x03; //ADTS = 3;
 22e:	8b e7       	ldi	r24, 0x7B	; 123
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2b e7       	ldi	r18, 0x7B	; 123
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	23 60       	ori	r18, 0x03	; 3
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
	ADCSRA = 1<<ADEN | 4<<ADPS0; //Enable ADC, 16TimesPrecaler
 240:	8a e7       	ldi	r24, 0x7A	; 122
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	24 e8       	ldi	r18, 0x84	; 132
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <Timer0_Init>:

void Timer0_Init()
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0x02; //Set part WGM for CTC mode
 258:	84 e4       	ldi	r24, 0x44	; 68
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	22 e0       	ldi	r18, 0x02	; 2
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
	TCCR0B = 0x05; // Set other part of WGM and PRESCALER = 1024
 262:	85 e4       	ldi	r24, 0x45	; 69
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	25 e0       	ldi	r18, 0x05	; 5
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
	OCR0A = 0x7F; // Select the Comparison point
 26c:	87 e4       	ldi	r24, 0x47	; 71
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	2f e7       	ldi	r18, 0x7F	; 127
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <serialCheckRxComplete>:
#define MYUBRR (F_CPU / 16 / BaudRate ) - 1


/* ********************** LEVEL 1 ********************************** */
unsigned char serialCheckRxComplete(void)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
 284:	80 ec       	ldi	r24, 0xC0	; 192
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	80 78       	andi	r24, 0x80	; 128
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <serialCheckTxReady>:


unsigned char serialCheckTxReady(void)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	80 72       	andi	r24, 0x20	; 32
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <delayLong>:

void delayLong()
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <delayLong+0x6>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	unsigned int delayvar;
	delayvar = 0;
 2b6:	1a 82       	std	Y+2, r1	; 0x02
 2b8:	19 82       	std	Y+1, r1	; 0x01
	while (delayvar <=  65500U)
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <delayLong+0x1c>
	{
		asm("nop");
 2bc:	00 00       	nop
		delayvar++;
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0;
	while (delayvar <=  65500U)
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	9a 81       	ldd	r25, Y+2	; 0x02
 2cc:	8d 3d       	cpi	r24, 0xDD	; 221
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	92 07       	cpc	r25, r18
 2d2:	a0 f3       	brcs	.-24     	; 0x2bc <delayLong+0x10>
	{
		asm("nop");
		delayvar++;
	}
}
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <establishContact>:



/* ********************** LEVEL 2 ********************************** */
void establishContact() {
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	while (serialCheckRxComplete() == 0) {
 2e6:	11 c0       	rjmp	.+34     	; 0x30a <establishContact+0x2c>
		serialPutc('A');
 2e8:	81 e4       	ldi	r24, 0x41	; 65
 2ea:	0e 94 9c 01 	call	0x338	; 0x338 <serialPutc>
		delayLong();
 2ee:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 2f2:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 2f6:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 2fa:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 2fe:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 302:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>
		delayLong();
 306:	0e 94 56 01 	call	0x2ac	; 0x2ac <delayLong>



/* ********************** LEVEL 2 ********************************** */
void establishContact() {
	while (serialCheckRxComplete() == 0) {
 30a:	0e 94 3e 01 	call	0x27c	; 0x27c <serialCheckRxComplete>
 30e:	88 23       	and	r24, r24
 310:	59 f3       	breq	.-42     	; 0x2e8 <establishContact+0xa>
		delayLong();
		delayLong();
		delayLong();
		delayLong();
	}
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <serialRead>:

unsigned char serialRead(void)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
	while (serialCheckRxComplete() == 0) {}	// While data is NOT available to read
 320:	00 00       	nop
 322:	0e 94 3e 01 	call	0x27c	; 0x27c <serialCheckRxComplete>
 326:	88 23       	and	r24, r24
 328:	e1 f3       	breq	.-8      	; 0x322 <serialRead+0xa>
	return UDR0;
 32a:	86 ec       	ldi	r24, 0xC6	; 198
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <serialPutc>:

void serialPutc(unsigned char DataOut)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	89 83       	std	Y+1, r24	; 0x01
	while (serialCheckTxReady() == 0)		// while NOT ready to transmit
 344:	00 00       	nop
 346:	0e 94 4a 01 	call	0x294	; 0x294 <serialCheckTxReady>
 34a:	88 23       	and	r24, r24
 34c:	e1 f3       	breq	.-8      	; 0x346 <serialPutc+0xe>
	{;;}
	UDR0 = DataOut;
 34e:	86 ec       	ldi	r24, 0xC6	; 198
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
}
 358:	0f 90       	pop	r0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <serialPuts>:

void serialPuts(unsigned char *DataOut)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	00 d0       	rcall	.+0      	; 0x366 <serialPuts+0x6>
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	89 83       	std	Y+1, r24	; 0x01
	for(; *DataOut; DataOut++)
 36e:	0b c0       	rjmp	.+22     	; 0x386 <serialPuts+0x26>
	{
		serialPutc(*DataOut);
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	0e 94 9c 01 	call	0x338	; 0x338 <serialPutc>
	UDR0 = DataOut;
}

void serialPuts(unsigned char *DataOut)
{
	for(; *DataOut; DataOut++)
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	9a 81       	ldd	r25, Y+2	; 0x02
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	9a 83       	std	Y+2, r25	; 0x02
 384:	89 83       	std	Y+1, r24	; 0x01
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	9a 81       	ldd	r25, Y+2	; 0x02
 38a:	fc 01       	movw	r30, r24
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	79 f7       	brne	.-34     	; 0x370 <serialPuts+0x10>
	{
		serialPutc(*DataOut);
	}
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <Serial_Init>:



/* ********************** LEVEL 3 ********************************** */
void Serial_Init(void)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62

	//Interrupts are not needed in this program. You can optionally disable interrupts.
	//asm("cli");		// DISABLE global interrupts.

	TX_DDR |= 1<<TX_PIN; //Ready Tx pin
 3a4:	8a e2       	ldi	r24, 0x2A	; 42
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	2a e2       	ldi	r18, 0x2A	; 42
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	22 60       	ori	r18, 0x02	; 2
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18

	LED_DDR |= 1<<LED_PIN;////// | _BV(1) | _BV(3) | _BV(5);
 3b6:	84 e2       	ldi	r24, 0x24	; 36
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	24 e2       	ldi	r18, 0x24	; 36
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	22 60       	ori	r18, 0x02	; 2
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18

	//Serial Initialization

 	/*Set baud rate */
	UBRR0H = (unsigned char)((MYUBRR)>>8);
 3c8:	85 ec       	ldi	r24, 0xC5	; 197
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	10 82       	st	Z, r1
	UBRR0L = (unsigned char) MYUBRR;
 3d0:	84 ec       	ldi	r24, 0xC4	; 196
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	27 e6       	ldi	r18, 0x67	; 103
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	/* Enable receiver and transmitter   */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 3da:	81 ec       	ldi	r24, 0xC1	; 193
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	28 e1       	ldi	r18, 0x18	; 24
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	/* Frame format: 8data, No parity, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 3e4:	82 ec       	ldi	r24, 0xC2	; 194
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	26 e0       	ldi	r18, 0x06	; 6
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18


	LED_PORT |= LED_PIN; // Turn on LED @ PB1
 3ee:	85 e2       	ldi	r24, 0x25	; 37
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	25 e2       	ldi	r18, 0x25	; 37
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	21 60       	ori	r18, 0x01	; 1
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18


	establishContact();  // send a byte to establish contact until Processing responds
 400:	0e 94 6f 01 	call	0x2de	; 0x2de <establishContact>

	LED_PORT &= ~1<LED_PIN; // Turn off idicator LED
 404:	85 e2       	ldi	r24, 0x25	; 37
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	25 e2       	ldi	r18, 0x25	; 37
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	21 70       	andi	r18, 0x01	; 1
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <WaitForPermissionForData>:

void WaitForPermissionForData(unsigned int size)
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	00 d0       	rcall	.+0      	; 0x422 <WaitForPermissionForData+0x6>
 422:	00 d0       	rcall	.+0      	; 0x424 <WaitForPermissionForData+0x8>
 424:	1f 92       	push	r1
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	9d 83       	std	Y+5, r25	; 0x05
 42c:	8c 83       	std	Y+4, r24	; 0x04
	char cmd = 0;
 42e:	19 82       	std	Y+1, r1	; 0x01
	int proceed = 0;
 430:	1b 82       	std	Y+3, r1	; 0x03
 432:	1a 82       	std	Y+2, r1	; 0x02

	serialPutc('W');
 434:	87 e5       	ldi	r24, 0x57	; 87
 436:	0e 94 9c 01 	call	0x338	; 0x338 <serialPutc>
	serialPutc(size);
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	0e 94 9c 01 	call	0x338	; 0x338 <serialPutc>
	while(~proceed)
 440:	07 c0       	rjmp	.+14     	; 0x450 <WaitForPermissionForData+0x34>
	{
		cmd = serialRead();
 442:	0e 94 8c 01 	call	0x318	; 0x318 <serialRead>
 446:	89 83       	std	Y+1, r24	; 0x01
		if(cmd == 'W') {
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	87 35       	cpi	r24, 0x57	; 87
 44c:	09 f4       	brne	.+2      	; 0x450 <WaitForPermissionForData+0x34>
			break;
 44e:	06 c0       	rjmp	.+12     	; 0x45c <WaitForPermissionForData+0x40>
	char cmd = 0;
	int proceed = 0;

	serialPutc('W');
	serialPutc(size);
	while(~proceed)
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	8f 3f       	cpi	r24, 0xFF	; 255
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	92 07       	cpc	r25, r18
 45a:	99 f7       	brne	.-26     	; 0x442 <WaitForPermissionForData+0x26>
		cmd = serialRead();
		if(cmd == 'W') {
			break;
		}
	}
}
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <SendForProcessing>:

void SendForProcessing(int *data,unsigned int size)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <SendForProcessing+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <SendForProcessing+0x8>
 474:	00 d0       	rcall	.+0      	; 0x476 <SendForProcessing+0xa>
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	9c 83       	std	Y+4, r25	; 0x04
 47c:	8b 83       	std	Y+3, r24	; 0x03
 47e:	7e 83       	std	Y+6, r23	; 0x06
 480:	6d 83       	std	Y+5, r22	; 0x05
	//char *str = 0;
	for(int i = 0; i<size; i++) {
 482:	1a 82       	std	Y+2, r1	; 0x02
 484:	19 82       	std	Y+1, r1	; 0x01
 486:	12 c0       	rjmp	.+36     	; 0x4ac <SendForProcessing+0x40>
		//itoa( *(data+i), str, 10 );
		serialPutc(*(data+i));
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	2b 81       	ldd	r18, Y+3	; 0x03
 492:	3c 81       	ldd	r19, Y+4	; 0x04
 494:	82 0f       	add	r24, r18
 496:	93 1f       	adc	r25, r19
 498:	fc 01       	movw	r30, r24
 49a:	80 81       	ld	r24, Z
 49c:	91 81       	ldd	r25, Z+1	; 0x01
 49e:	0e 94 9c 01 	call	0x338	; 0x338 <serialPutc>
}

void SendForProcessing(int *data,unsigned int size)
{
	//char *str = 0;
	for(int i = 0; i<size; i++) {
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	9a 81       	ldd	r25, Y+2	; 0x02
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	29 81       	ldd	r18, Y+1	; 0x01
 4ae:	3a 81       	ldd	r19, Y+2	; 0x02
 4b0:	8d 81       	ldd	r24, Y+5	; 0x05
 4b2:	9e 81       	ldd	r25, Y+6	; 0x06
 4b4:	28 17       	cp	r18, r24
 4b6:	39 07       	cpc	r19, r25
 4b8:	38 f3       	brcs	.-50     	; 0x488 <SendForProcessing+0x1c>
		//itoa( *(data+i), str, 10 );
		serialPutc(*(data+i));
	}
}
 4ba:	26 96       	adiw	r28, 0x06	; 6
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <AVR_Init>:
#include "Hydrophone.h"
#include "SerialApp.h"


void AVR_Init()
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
	// Setup AVR Registers
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <main>:

int main()
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	c4 50       	subi	r28, 0x04	; 4
 4e4:	d4 40       	sbci	r29, 0x04	; 4
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
	//AVR_Init();
	Hydrophone_Init();
 4f0:	0e 94 03 01 	call	0x206	; 0x206 <Hydrophone_Init>
	Serial_Init();
 4f4:	0e 94 ce 01 	call	0x39c	; 0x39c <Serial_Init>

	unsigned int PACKET_SIZE = 2;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	9a 83       	std	Y+2, r25	; 0x02
 4fe:	89 83       	std	Y+1, r24	; 0x01

	int *DataForPython;
	int buf[512] = {0};
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	34 e0       	ldi	r19, 0x04	; 4
 504:	ce 01       	movw	r24, r28
 506:	05 96       	adiw	r24, 0x05	; 5
 508:	fc 01       	movw	r30, r24
 50a:	a9 01       	movw	r20, r18
 50c:	11 92       	st	Z+, r1
 50e:	41 50       	subi	r20, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <main+0x32>

	while(1)
	{
		WaitForPermissionForData(PACKET_SIZE); // writes W and int to python
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	9a 81       	ldd	r25, Y+2	; 0x02
 518:	0e 94 0e 02 	call	0x41c	; 0x41c <WaitForPermissionForData>
		LED_PORT |= 1<<LED_PIN;
 51c:	85 e2       	ldi	r24, 0x25	; 37
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	25 e2       	ldi	r18, 0x25	; 37
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	f9 01       	movw	r30, r18
 526:	20 81       	ld	r18, Z
 528:	22 60       	ori	r18, 0x02	; 2
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
		DataForPython = CollectHydrophoneData(buf,PACKET_SIZE);
 52e:	29 81       	ldd	r18, Y+1	; 0x01
 530:	3a 81       	ldd	r19, Y+2	; 0x02
 532:	ce 01       	movw	r24, r28
 534:	05 96       	adiw	r24, 0x05	; 5
 536:	b9 01       	movw	r22, r18
 538:	0e 94 48 00 	call	0x90	; 0x90 <CollectHydrophoneData>
 53c:	9c 83       	std	Y+4, r25	; 0x04
 53e:	8b 83       	std	Y+3, r24	; 0x03
		LED_PORT &= ~1<<LED_PIN;
 540:	85 e2       	ldi	r24, 0x25	; 37
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	25 e2       	ldi	r18, 0x25	; 37
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	2c 7f       	andi	r18, 0xFC	; 252
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
		SendForProcessing(DataForPython,PACKET_SIZE);
 552:	29 81       	ldd	r18, Y+1	; 0x01
 554:	3a 81       	ldd	r19, Y+2	; 0x02
 556:	8b 81       	ldd	r24, Y+3	; 0x03
 558:	9c 81       	ldd	r25, Y+4	; 0x04
 55a:	b9 01       	movw	r22, r18
 55c:	0e 94 36 02 	call	0x46c	; 0x46c <SendForProcessing>
	}
 560:	d9 cf       	rjmp	.-78     	; 0x514 <main+0x3a>

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
