function acoustics_data_veiwer
    % settings
    settings = {};
    settings.run_recent         = false;
    settings.default_data_dir   = '~/Documents/URC-development/Raw_Footage/process 07-17/acoustics/';
    settings.yaw_config         = {'CHA1','CHB1'};
    settings.pitch_config       = {'CHA0','CHB0'};
    settings.print_channels     = settings.yaw_config;
    settings.negative_index     = 1; %which hydrophone represents the negative side
    
    settings.filename_fmt = {'filename',' - ','type'};
    
    settings.simulate_yaw_heading = true;
    settings.simulate_pitch_heading = true;
    
    settings.export_data = false;
    
    % runtime settings
    settings.data_filename = '';
    settings.data_filepath = '';
    
    % present a ui or pull from memory target file
    if settings.run_recent == false
        dd = settings.default_data_dir;
        [fn,fp] = uigetfile([dd,'*.csv'],'pick a data file');
        settings.data_filename = fn;
        settings.data_filepath = fp;
    else
        %TODO
    end
    
    run(settings);
    
end

function run(setting)
    % import data from file
    abs_fp = [setting.data_filepath,setting.data_filename];
    [CHA1,CHB1,CHA0,CHB0,timestamp,AGain,DGain,FS,YawHeading] = importfile(abs_fp);
    
    % clean up the imports
    acoustics = {};
    acoustics.data = {CHA1,CHB1,CHA0,CHB0};
    acoustics.sequence = {'CHA1','CHB1','CHA0','CHB0'};
    acoustics.FS = FS(1);
    acoustics.AGain = AGain;
    acoustics.DGain = DGain;
    acoustics.TotalGain = AGain .* DGain;
    acoustics.M = length(CHA0);
    acoustics.TS = 1/acoustics.FS;
    acoustics.t = [0 : acoustics.TS : (acoustics.M-1)*acoustics.TS];
    
    % plot the data
    % ---aquire user specified information about what channels to plot
    requested_channels = [];
    for i = 1:length(setting.print_channels)
        requested_channel = find(strcmp(setting.print_channels(i),acoustics.sequence));
        requested_channels(i) = requested_channel;
    end
    
    % plot the data
    interactive_plot_data(setting, acoustics, requested_channels)
    
end

function interactive_plot_data(setting, acoustics, channels)
    % plot settings
    hold on
    
    % plot the data
    i = 0;
    for ch = channels
        plot(acoustics.t, acoustics.data{ch});
    end
    
    % 
end
function [CHA1,CHB1,CHA0,CHB0,timestamp,AGain,DGainsamplerate,FS,YawHeading] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [CHA1,CHB1,CHA0,CHB0,TIMESTAMP,AGAIN,DGAINSAMPLERATE,FS,YAWHEADING] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [CHA1,CHB1,CHA0,CHB0,TIMESTAMP,AGAIN,DGAINSAMPLERATE,FS,YAWHEADING] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [CHA1,CHB1,CHA0,CHB0,timestamp,AGain,DGainsamplerate,FS,YawHeading] = importfile('pooltest13-07-170 - sig.csv',1, 3251);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/07/22 09:05:41

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,6,7,8,9]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,6,7,8,9]);
rawCellColumns = raw(:, 5);


%% Replace non-numeric cells with 0.0
R = cellfun(@(x) (~isnumeric(x) && ~islogical(x)) || isnan(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {0.0}; % Replace non-numeric cells

%% Allocate imported array to column variable names
CHA1 = cell2mat(rawNumericColumns(:, 1));
CHB1 = cell2mat(rawNumericColumns(:, 2));
CHA0 = cell2mat(rawNumericColumns(:, 3));
CHB0 = cell2mat(rawNumericColumns(:, 4));
timestamp = rawCellColumns(:, 1);
AGain = cell2mat(rawNumericColumns(:, 5));
DGainsamplerate = cell2mat(rawNumericColumns(:, 6));
FS = cell2mat(rawNumericColumns(:, 7));
YawHeading = cell2mat(rawNumericColumns(:, 8));


end