import numpy as np
import numpy.ma as ma
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.hold(True)


TOL = 2

AX = np.array([[22.548, 21.394, 20.313, 19.318, 18.423, 17.642, 16.991, 16.486, 16.141, 15.966, 15.966, 16.141, 16.486, 16.991, 17.642, 18.423, 19.318, 20.313, 21.394, 22.548],
[21.394, 20.174, 19.025, 17.958, 16.991, 16.141, 15.427, 14.870, 14.486, 14.290, 14.290, 14.486, 14.870, 15.427, 16.141, 16.991, 17.958, 19.025, 20.174, 21.394],
[20.313, 19.025, 17.801, 16.656, 15.609, 14.679, 13.890, 13.268, 12.836, 12.615, 12.615, 12.836, 13.268, 13.890, 14.679, 15.609, 16.656, 17.801, 19.025, 20.313],
[19.318, 17.958, 16.656, 15.427, 14.290, 13.268, 12.390, 11.688, 11.196, 10.941, 10.941, 11.196, 11.688, 12.390, 13.268, 14.290, 15.427, 16.656, 17.958, 19.318],
[18.423, 16.991, 15.609, 14.290, 13.054, 11.926, 10.941, 10.139, 9.568, 9.269, 9.269, 9.568, 10.139, 10.941, 11.926, 13.054, 14.290, 15.609, 16.991, 18.423],
[17.642, 16.141, 14.679, 13.268, 11.926, 10.681, 9.568, 8.639, 7.961, 7.599, 7.599, 7.961, 8.639, 9.568, 10.681, 11.926, 13.268, 14.679, 16.141, 17.642],
[16.991, 15.427, 13.890, 12.390, 10.941, 9.568, 8.307, 7.219, 6.391, 5.934, 5.934, 6.391, 7.219, 8.307, 9.568, 10.941, 12.390, 13.890, 15.427, 16.991],
[16.486, 14.870, 13.268, 11.688, 10.139, 8.639, 7.219, 5.934, 4.893, 4.279, 4.279, 4.893, 5.934, 7.219, 8.639, 10.139, 11.688, 13.268, 14.870, 16.486],
[16.141, 14.486, 12.836, 11.196, 9.568, 7.961, 6.391, 4.893, 3.560, 2.654, 2.654, 3.560, 4.893, 6.391, 7.961, 9.568, 11.196, 12.836, 14.486, 16.141],
[15.966, 14.290, 12.615, 10.941, 9.269, 7.599, 5.934, 4.279, 2.654, 1.187, 1.187, 2.654, 4.279, 5.934, 7.599, 9.269, 10.941, 12.615, 14.290, 15.966],
[15.966, 14.290, 12.615, 10.941, 9.269, 7.599, 5.934, 4.279, 2.654, 1.187, 1.187, 2.654, 4.279, 5.934, 7.599, 9.269, 10.941, 12.615, 14.290, 15.966],
[16.141, 14.486, 12.836, 11.196, 9.568, 7.961, 6.391, 4.893, 3.560, 2.654, 2.654, 3.560, 4.893, 6.391, 7.961, 9.568, 11.196, 12.836, 14.486, 16.141],
[16.486, 14.870, 13.268, 11.688, 10.139, 8.639, 7.219, 5.934, 4.893, 4.279, 4.279, 4.893, 5.934, 7.219, 8.639, 10.139, 11.688, 13.268, 14.870, 16.486],
[16.991, 15.427, 13.890, 12.390, 10.941, 9.568, 8.307, 7.219, 6.391, 5.934, 5.934, 6.391, 7.219, 8.307, 9.568, 10.941, 12.390, 13.890, 15.427, 16.991],
[17.642, 16.141, 14.679, 13.268, 11.926, 10.681, 9.568, 8.639, 7.961, 7.599, 7.599, 7.961, 8.639, 9.568, 10.681, 11.926, 13.268, 14.679, 16.141, 17.642],
[18.423, 16.991, 15.609, 14.290, 13.054, 11.926, 10.941, 10.139, 9.568, 9.269, 9.269, 9.568, 10.139, 10.941, 11.926, 13.054, 14.290, 15.609, 16.991, 18.423],
[19.318, 17.958, 16.656, 15.427, 14.290, 13.268, 12.390, 11.688, 11.196, 10.941, 10.941, 11.196, 11.688, 12.390, 13.268, 14.290, 15.427, 16.656, 17.958, 19.318],
[20.313, 19.025, 17.801, 16.656, 15.609, 14.679, 13.890, 13.268, 12.836, 12.615, 12.615, 12.836, 13.268, 13.890, 14.679, 15.609, 16.656, 17.801, 19.025, 20.313],
[21.394, 20.174, 19.025, 17.958, 16.991, 16.141, 15.427, 14.870, 14.486, 14.290, 14.290, 14.486, 14.870, 15.427, 16.141, 16.991, 17.958, 19.025, 20.174, 21.394],
[22.548, 21.394, 20.313, 19.318, 18.423, 17.642, 16.991, 16.486, 16.141, 15.966, 15.966, 16.141, 16.486, 16.991, 17.642, 18.423, 19.318, 20.313, 21.394, 22.548]])

AY = np.array([[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000]])

AZ = np.array([[-50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008, -50.008],
[-44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744, -44.744],
[-39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481, -39.481],
[-34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218, -34.218],
[-28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955, -28.955],
[-23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692, -23.692],
[-18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429, -18.429],
[-13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165, -13.165],
[-7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902, -7.902],
[-2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639, -2.639],
[2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624, 2.624],
[7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887, 7.887],
[13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150, 13.150],
[18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414, 18.414],
[23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677, 23.677],
[28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940, 28.940],
[34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203, 34.203],
[39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466, 39.466],
[44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729, 44.729],
[49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992, 49.992]])

BX = np.array([[27.814, 28.200, 28.561, 28.893, 29.192, 29.453, 29.671, 29.839, 29.955, 30.013, 30.013, 29.955, 29.839, 29.671, 29.453, 29.192, 28.893, 28.561, 28.200, 27.814],
[24.478, 24.886, 25.270, 25.626, 25.949, 26.233, 26.472, 26.658, 26.786, 26.852, 26.852, 26.786, 26.658, 26.472, 26.233, 25.949, 25.626, 25.270, 24.886, 24.478],
[21.118, 21.548, 21.957, 22.339, 22.689, 23.000, 23.264, 23.472, 23.616, 23.690, 23.690, 23.616, 23.472, 23.264, 23.000, 22.689, 22.339, 21.957, 21.548, 21.118],
[17.728, 18.183, 18.618, 19.028, 19.408, 19.750, 20.043, 20.278, 20.442, 20.527, 20.527, 20.442, 20.278, 20.043, 19.750, 19.408, 19.028, 18.618, 18.183, 17.728],
[14.306, 14.784, 15.246, 15.687, 16.100, 16.477, 16.806, 17.074, 17.265, 17.365, 17.365, 17.265, 17.074, 16.806, 16.477, 16.100, 15.687, 15.246, 14.784, 14.306],
[10.845, 11.347, 11.835, 12.307, 12.755, 13.171, 13.543, 13.853, 14.080, 14.201, 14.201, 14.080, 13.853, 13.543, 13.171, 12.755, 12.307, 11.835, 11.347, 10.845],
[7.341, 7.864, 8.377, 8.878, 9.363, 9.821, 10.243, 10.606, 10.883, 11.036, 11.036, 10.883, 10.606, 10.243, 9.821, 9.363, 8.878, 8.377, 7.864, 7.341],
[3.788, 4.328, 4.863, 5.391, 5.909, 6.410, 6.885, 7.314, 7.662, 7.867, 7.867, 7.662, 7.314, 6.885, 6.410, 5.909, 5.391, 4.863, 4.328, 3.788],
[0.182, 0.735, 1.286, 1.834, 2.378, 2.915, 3.440, 3.940, 4.385, 4.688, 4.688, 4.385, 3.940, 3.440, 2.915, 2.378, 1.834, 1.286, 0.735, 0.182],
[-3.481, -2.921, -2.362, -1.802, -1.244, -0.686, -0.129, 0.424, 0.967, 1.457, 1.457, 0.967, 0.424, -0.129, -0.686, -1.244, -1.802, -2.362, -2.921, -3.481],
[-7.203, -6.643, -6.083, -5.524, -4.965, -4.407, -3.851, -3.298, -2.755, -2.265, -2.265, -2.755, -3.298, -3.851, -4.407, -4.965, -5.524, -6.083, -6.643, -7.203],
[-10.983, -10.430, -9.879, -9.331, -8.787, -8.250, -7.725, -7.225, -6.779, -6.477, -6.477, -6.779, -7.225, -7.725, -8.250, -8.787, -9.331, -9.879, -10.430, -10.983],
[-14.820, -14.280, -13.745, -13.217, -12.699, -12.198, -11.723, -11.294, -10.946, -10.741, -10.741, -10.946, -11.294, -11.723, -12.198, -12.699, -13.217, -13.745, -14.280, -14.820],
[-18.710, -18.188, -17.674, -17.173, -16.689, -16.230, -15.809, -15.445, -15.168, -15.016, -15.016, -15.168, -15.445, -15.809, -16.230, -16.689, -17.173, -17.674, -18.188, -18.710],
[-22.649, -22.148, -21.659, -21.188, -20.740, -20.323, -19.952, -19.641, -19.415, -19.294, -19.294, -19.415, -19.641, -19.952, -20.323, -20.740, -21.188, -21.659, -22.148, -22.649],
[-26.632, -26.153, -25.692, -25.251, -24.838, -24.461, -24.132, -23.864, -23.673, -23.573, -23.573, -23.673, -23.864, -24.132, -24.461, -24.838, -25.251, -25.692, -26.153, -26.632],
[-30.653, -30.198, -29.763, -29.353, -28.973, -28.631, -28.338, -28.103, -27.939, -27.854, -27.854, -27.939, -28.103, -28.338, -28.631, -28.973, -29.353, -29.763, -30.198, -30.653],
[-34.707, -34.276, -33.867, -33.485, -33.135, -32.824, -32.561, -32.353, -32.208, -32.135, -32.135, -32.208, -32.353, -32.561, -32.824, -33.135, -33.485, -33.867, -34.276, -34.707],
[-38.789, -38.382, -37.998, -37.641, -37.318, -37.034, -36.796, -36.609, -36.481, -36.416, -36.416, -36.481, -36.609, -36.796, -37.034, -37.318, -37.641, -37.998, -38.382, -38.789],
[-42.896, -42.511, -42.150, -41.818, -41.518, -41.257, -41.040, -40.871, -40.756, -40.697, -40.697, -40.756, -40.871, -41.040, -41.257, -41.518, -41.818, -42.150, -42.511, -42.896]])

BY = np.array([[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000]])

BZ = np.array([[-42.889, -42.503, -42.142, -41.810, -41.511, -41.250, -41.032, -40.864, -40.748, -40.690, -40.690, -40.748, -40.864, -41.032, -41.250, -41.511, -41.810, -42.142, -42.503, -42.889],
[-38.782, -38.374, -37.990, -37.634, -37.311, -37.027, -36.788, -36.602, -36.474, -36.408, -36.408, -36.474, -36.602, -36.788, -37.027, -37.311, -37.634, -37.990, -38.374, -38.782],
[-34.699, -34.269, -33.860, -33.477, -33.127, -32.817, -32.553, -32.345, -32.201, -32.127, -32.127, -32.201, -32.345, -32.553, -32.817, -33.127, -33.477, -33.860, -34.269, -34.699],
[-30.645, -30.191, -29.756, -29.345, -28.965, -28.624, -28.330, -28.096, -27.931, -27.846, -27.846, -27.931, -28.096, -28.330, -28.624, -28.965, -29.345, -29.756, -30.191, -30.645],
[-26.624, -26.146, -25.684, -25.243, -24.830, -24.454, -24.124, -23.857, -23.666, -23.566, -23.566, -23.666, -23.857, -24.124, -24.454, -24.830, -25.243, -25.684, -26.146, -26.624],
[-22.642, -22.140, -21.652, -21.180, -20.732, -20.316, -19.944, -19.634, -19.407, -19.286, -19.286, -19.407, -19.634, -19.944, -20.316, -20.732, -21.180, -21.652, -22.140, -22.642],
[-18.703, -18.180, -17.667, -17.165, -16.681, -16.222, -15.801, -15.438, -15.161, -15.008, -15.008, -15.161, -15.438, -15.801, -16.222, -16.681, -17.165, -17.667, -18.180, -18.703],
[-14.812, -14.272, -13.737, -13.209, -12.692, -12.191, -11.716, -11.287, -10.939, -10.734, -10.734, -10.939, -11.287, -11.716, -12.191, -12.692, -13.209, -13.737, -14.272, -14.812],
[-10.975, -10.422, -9.871, -9.323, -8.779, -8.242, -7.718, -7.217, -6.772, -6.469, -6.469, -6.772, -7.217, -7.718, -8.242, -8.779, -9.323, -9.871, -10.422, -10.975],
[-7.195, -6.635, -6.076, -5.516, -4.958, -4.400, -3.843, -3.290, -2.747, -2.257, -2.257, -2.747, -3.290, -3.843, -4.400, -4.958, -5.516, -6.076, -6.635, -7.195],
[-3.474, -2.914, -2.354, -1.795, -1.236, -0.678, -0.122, 0.431, 0.974, 1.464, 1.464, 0.974, 0.431, -0.122, -0.678, -1.236, -1.795, -2.354, -2.914, -3.474],
[0.189, 0.742, 1.294, 1.842, 2.386, 2.923, 3.447, 3.948, 4.393, 4.696, 4.696, 4.393, 3.948, 3.447, 2.923, 2.386, 1.842, 1.294, 0.742, 0.189],
[3.796, 4.336, 4.871, 5.399, 5.916, 6.417, 6.892, 7.322, 7.669, 7.874, 7.874, 7.669, 7.322, 6.892, 6.417, 5.916, 5.399, 4.871, 4.336, 3.796],
[7.349, 7.871, 8.385, 8.886, 9.370, 9.829, 10.250, 10.614, 10.890, 11.043, 11.043, 10.890, 10.614, 10.250, 9.829, 9.370, 8.886, 8.385, 7.871, 7.349],
[10.853, 11.354, 11.843, 12.314, 12.762, 13.179, 13.551, 13.861, 14.087, 14.208, 14.208, 14.087, 13.861, 13.551, 13.179, 12.762, 12.314, 11.843, 11.354, 10.853],
[14.313, 14.792, 15.254, 15.694, 16.107, 16.484, 16.813, 17.081, 17.272, 17.372, 17.372, 17.272, 17.081, 16.813, 16.484, 16.107, 15.694, 15.254, 14.792, 14.313],
[17.736, 18.190, 18.625, 19.036, 19.416, 19.757, 20.051, 20.285, 20.450, 20.535, 20.535, 20.450, 20.285, 20.051, 19.757, 19.416, 19.036, 18.625, 18.190, 17.736],
[21.125, 21.556, 21.965, 22.347, 22.697, 23.008, 23.271, 23.479, 23.623, 23.697, 23.697, 23.623, 23.479, 23.271, 23.008, 22.697, 22.347, 21.965, 21.556, 21.125],
[24.486, 24.893, 25.277, 25.633, 25.957, 26.241, 26.479, 26.666, 26.794, 26.859, 26.859, 26.794, 26.666, 26.479, 26.241, 25.957, 25.633, 25.277, 24.893, 24.486],
[27.822, 28.207, 28.568, 28.901, 29.200, 29.461, 29.678, 29.847, 29.962, 30.021, 30.021, 29.962, 29.847, 29.678, 29.461, 29.200, 28.901, 28.568, 28.207, 27.822]])

CX = np.array([[70.836, 69.021, 67.321, 65.756, 64.347, 63.118, 62.094, 61.300, 60.757, 60.481, 60.481, 60.757, 61.300, 62.094, 63.118, 64.347, 65.756, 67.321, 69.021, 70.836],
[65.299, 63.380, 61.572, 59.894, 58.373, 57.035, 55.912, 55.035, 54.431, 54.123, 54.123, 54.431, 55.035, 55.912, 57.035, 58.373, 59.894, 61.572, 63.380, 65.299],
[59.878, 57.850, 55.925, 54.124, 52.476, 51.013, 49.772, 48.793, 48.114, 47.766, 47.766, 48.114, 48.793, 49.772, 51.013, 52.476, 54.124, 55.925, 57.850, 59.878],
[54.591, 52.451, 50.403, 48.469, 46.680, 45.072, 43.690, 42.586, 41.811, 41.411, 41.411, 41.811, 42.586, 43.690, 45.072, 46.680, 48.469, 50.403, 52.451, 54.591],
[49.460, 47.208, 45.033, 42.958, 41.013, 39.240, 37.689, 36.428, 35.529, 35.058, 35.058, 35.529, 36.428, 37.689, 39.240, 41.013, 42.958, 45.033, 47.208, 49.460],
[44.510, 42.149, 39.848, 37.629, 35.518, 33.558, 31.807, 30.347, 29.279, 28.709, 28.709, 29.279, 30.347, 31.807, 33.558, 35.518, 37.629, 39.848, 42.149, 44.510],
[39.765, 37.304, 34.886, 32.525, 30.246, 28.085, 26.102, 24.390, 23.087, 22.368, 22.368, 23.087, 24.390, 26.102, 28.085, 30.246, 32.525, 34.886, 37.304, 39.765],
[35.249, 32.705, 30.185, 27.699, 25.263, 22.904, 20.668, 18.647, 17.009, 16.043, 16.043, 17.009, 18.647, 20.668, 22.904, 25.263, 27.699, 30.185, 32.705, 35.249],
[30.984, 28.380, 25.785, 23.203, 20.642, 18.114, 15.644, 13.288, 11.191, 9.765, 9.765, 11.191, 13.288, 15.644, 18.114, 20.642, 23.203, 25.785, 28.380, 30.984],
[26.986, 24.350, 21.715, 19.081, 16.450, 13.823, 11.203, 8.600, 6.043, 3.735, 3.735, 6.043, 8.600, 11.203, 13.823, 16.450, 19.081, 21.715, 24.350, 26.986],
[23.265, 20.628, 17.993, 15.360, 12.729, 10.101, 7.482, 4.878, 2.321, 0.014, 0.014, 2.321, 4.878, 7.482, 10.101, 12.729, 15.360, 17.993, 20.628, 23.265],
[19.819, 17.215, 14.620, 12.038, 9.477, 6.949, 4.479, 2.123, 0.026, -1.400, -1.400, 0.026, 2.123, 4.479, 6.949, 9.477, 12.038, 14.620, 17.215, 19.819],
[16.641, 14.097, 11.577, 9.091, 6.655, 4.296, 2.060, 0.039, -1.599, -2.565, -2.565, -1.599, 0.039, 2.060, 4.296, 6.655, 9.091, 11.577, 14.097, 16.641],
[13.713, 11.253, 8.835, 6.474, 4.195, 2.034, 0.051, -1.662, -2.964, -3.683, -3.683, -2.964, -1.662, 0.051, 2.034, 4.195, 6.474, 8.835, 11.253, 13.713],
[11.015, 8.654, 6.354, 4.134, 2.023, 0.063, -1.687, -3.148, -4.215, -4.785, -4.785, -4.215, -3.148, -1.687, 0.063, 2.023, 4.134, 6.354, 8.654, 11.015],
[8.522, 6.270, 4.095, 2.020, 0.076, -1.698, -3.248, -4.510, -5.409, -5.880, -5.880, -5.409, -4.510, -3.248, -1.698, 0.076, 2.020, 4.095, 6.270, 8.522],
[6.210, 4.070, 2.022, 0.088, -1.701, -3.309, -4.691, -5.795, -6.570, -6.970, -6.970, -6.570, -5.795, -4.691, -3.309, -1.701, 0.088, 2.022, 4.070, 6.210],
[4.053, 2.026, 0.101, -1.700, -3.348, -4.811, -6.052, -7.031, -7.710, -8.058, -8.058, -7.710, -7.031, -6.052, -4.811, -3.348, -1.700, 0.101, 2.026, 4.053],
[2.032, 0.113, -1.696, -3.373, -4.895, -6.232, -7.355, -8.233, -8.836, -9.144, -9.144, -8.836, -8.233, -7.355, -6.232, -4.895, -3.373, -1.696, 0.113, 2.032],
[0.125, -1.690, -3.390, -4.955, -6.364, -7.593, -8.616, -9.411, -9.954, -10.230, -10.230, -9.954, -9.411, -8.616, -7.593, -6.364, -4.955, -3.390, -1.690, 0.125]])

CY = np.array([[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000],
[-50.000, -44.737, -39.474, -34.211, -28.947, -23.684, -18.421, -13.158, -7.895, -2.632, 2.632, 7.895, 13.158, 18.421, 23.684, 28.947, 34.211, 39.474, 44.737, 50.000]])

CZ = np.array([[-0.118, 1.697, 3.397, 4.963, 6.372, 7.600, 8.624, 9.418, 9.961, 10.237, 10.237, 9.961, 9.418, 8.624, 7.600, 6.372, 4.963, 3.397, 1.697, -0.118],
[-2.024, -0.105, 1.703, 3.381, 4.902, 6.240, 7.363, 8.240, 8.844, 9.152, 9.152, 8.844, 8.240, 7.363, 6.240, 4.902, 3.381, 1.703, -0.105, -2.024],
[-4.046, -2.018, -0.093, 1.707, 3.355, 4.818, 6.059, 7.038, 7.717, 8.066, 8.066, 7.717, 7.038, 6.059, 4.818, 3.355, 1.707, -0.093, -2.018, -4.046],
[-6.202, -4.062, -2.014, -0.081, 1.709, 3.317, 4.698, 5.803, 6.577, 6.978, 6.978, 6.577, 5.803, 4.698, 3.317, 1.709, -0.081, -2.014, -4.062, -6.202],
[-8.515, -6.263, -4.088, -2.013, -0.068, 1.706, 3.256, 4.517, 5.417, 5.887, 5.887, 5.417, 4.517, 3.256, 1.706, -0.068, -2.013, -4.088, -6.263, -8.515],
[-11.008, -8.647, -6.346, -4.127, -2.016, -0.056, 1.695, 3.155, 4.223, 4.793, 4.793, 4.223, 3.155, 1.695, -0.056, -2.016, -4.127, -6.346, -8.647, -11.008],
[-13.706, -11.245, -8.827, -6.467, -4.187, -2.027, -0.043, 1.669, 2.971, 3.691, 3.691, 2.971, 1.669, -0.043, -2.027, -4.187, -6.467, -8.827, -11.245, -13.706],
[-16.633, -14.090, -11.570, -9.084, -6.648, -4.288, -2.053, -0.031, 1.606, 2.572, 2.572, 1.606, -0.031, -2.053, -4.288, -6.648, -9.084, -11.570, -14.090, -16.633],
[-19.812, -17.207, -14.612, -12.031, -9.470, -6.942, -4.472, -2.115, -0.019, 1.408, 1.408, -0.019, -2.115, -4.472, -6.942, -9.470, -12.031, -14.612, -17.207, -19.812],
[-23.257, -20.621, -17.986, -15.352, -12.721, -10.094, -7.474, -4.871, -2.314, -0.006, -0.006, -2.314, -4.871, -7.474, -10.094, -12.721, -15.352, -17.986, -20.621, -23.257],
[-26.979, -24.343, -21.707, -19.074, -16.443, -13.816, -11.196, -8.592, -6.036, -3.728, -3.728, -6.036, -8.592, -11.196, -13.816, -16.443, -19.074, -21.707, -24.343, -26.979],
[-30.977, -28.372, -25.777, -23.196, -20.635, -18.107, -15.637, -13.280, -11.183, -9.757, -9.757, -11.183, -13.280, -15.637, -18.107, -20.635, -23.196, -25.777, -28.372, -30.977],
[-35.241, -32.698, -30.178, -27.692, -25.256, -22.896, -20.661, -18.639, -17.002, -16.036, -16.036, -17.002, -18.639, -20.661, -22.896, -25.256, -27.692, -30.178, -32.698, -35.241],
[-39.757, -37.297, -34.878, -32.518, -30.239, -28.078, -26.095, -24.382, -23.080, -22.361, -22.361, -23.080, -24.382, -26.095, -28.078, -30.239, -32.518, -34.878, -37.297, -39.757],
[-44.502, -42.141, -39.841, -37.621, -35.510, -33.550, -31.800, -30.339, -29.272, -28.702, -28.702, -29.272, -30.339, -31.800, -33.550, -35.510, -37.621, -39.841, -42.141, -44.502],
[-49.453, -47.200, -45.026, -42.951, -41.006, -39.232, -37.682, -36.421, -35.521, -35.051, -35.051, -35.521, -36.421, -37.682, -39.232, -41.006, -42.951, -45.026, -47.200, -49.453],
[-54.583, -52.443, -50.395, -48.462, -46.672, -45.064, -43.683, -42.578, -41.804, -41.403, -41.403, -41.804, -42.578, -43.683, -45.064, -46.672, -48.462, -50.395, -52.443, -54.583],
[-59.870, -57.843, -55.917, -54.117, -52.469, -51.006, -49.765, -48.786, -48.107, -47.759, -47.759, -48.107, -48.786, -49.765, -51.006, -52.469, -54.117, -55.917, -57.843, -59.870],
[-65.292, -63.373, -61.564, -59.887, -58.365, -57.028, -55.905, -55.027, -54.423, -54.116, -54.116, -54.423, -55.027, -55.905, -57.028, -58.365, -59.887, -61.564, -63.373, -65.292],
[-70.829, -69.013, -67.313, -65.748, -64.339, -63.110, -62.087, -61.293, -60.749, -60.473, -60.473, -60.749, -61.293, -62.087, -63.110, -64.339, -65.748, -67.313, -69.013, -70.829]])


A = np.array([AX,AY,AZ])
B = np.array([BX,BY,BZ])
C = np.array([CX,CY,CZ])

#mx_temp = ma.masked_values(A[0]-B[0], 0, atol=1)
#mx_X1 = ma.masked_array(mx_temp.data, ~mx_temp.mask)

def correlate(A, B, tol):
    """
    Generate a mask of available indices that represent identical
    points in space between (Mesh plotted) Matrices A and B. Axes
    are X (Right), Y (Forward), and Z (Up).
    """
    
    i = 0
    tmp = []
    print("doing work")
    
    # Check every Y and Z indice, and see if they represent points that are close
    # together.
    for r1 in range(A[0].shape[0]):
        for c1 in range(A[0].shape[1]):
            for r2 in range(B[0].shape[0]):
                for c2 in range(B[0].shape[1]):
                    y1 = A[1,r1,c1]
                    z1 = A[2,r1,c1]
        
                    y2 = B[1,r2,c2]
                    z2 = B[2,r2,c2]
                
                    dist = np.sqrt( (y2 - y1)**2 + (z2 - z1)**2)
                    if dist < tol:
                        tmp.append((r1,c1,r2,c2))
                        
                    # Keep count of how many comparisons get performed
                    i += 1
                    
    print("Perform %d comparisons among X and Y matrices!" % i)
                
    # save mask value
    mask = tmp
    
    i = 0
    tmp = []
    # Check Remaining X indices to complete the operation.
    for (r1,c1,r2,c2) in mask:
        x1 = A[0,r1,c1]
        x2 = B[0,r2,c2]
    
        dist = abs(x2 - x1)
        if dist < tol:
            tmp.append((r1,c1,r2,c2))
            #print("(%d, %d, %d, %d) -> %.2f" % (r1,c1,r2,c2,dist))
            
        # Keep count of how many comparisons get performed
        i += 1
        
    print("Performed %d comparisons among Z matrices!" % i)
    # save mask
    mask = tmp
    
    return mask
    
def masked_correlate(A, B, tol, mask):
    """
    Generate a mask of available indices that represent identical
    points in space between (Mesh plotted) Matrices A and B. Axes
    are X (Right), Y (Forward), and Z (Up).
    """
    
    i = 0
    tmp = []
    print("doing work")
    
    # Check every Y and Z indice, and see if they represent points that are close
    # together.
    for (r1,c1) in mask:
        for r2 in range(B[0].shape[0]):
            for c2 in range(B[0].shape[1]):
                y1 = A[1,r1,c1]
                z1 = A[2,r1,c1]
    
                y2 = B[1,r2,c2]
                z2 = B[2,r2,c2]
            
                dist = np.sqrt( (y2 - y1)**2 + (z2 - z1)**2)
                if dist < tol:
                    tmp.append((r1,c1,r2,c2))
                    
                # Keep count of how many comparisons get performed
                i += 1
                    
    print("Perform %d comparisons among X and Y matrices!" % i)
                
    # save mask value
    mask = tmp
    
    i = 0
    tmp = []
    # Check Remaining X indices to complete the operation.
    for (r1,c1,r2,c2) in mask:
        x1 = A[0,r1,c1]
        x2 = B[0,r2,c2]
    
        dist = abs(x2 - x1)
        if dist < tol:
            tmp.append((r1,c1,r2,c2))
            #print("(%d, %d, %d, %d) -> %.2f" % (r1,c1,r2,c2,dist))
            
        # Keep count of how many comparisons get performed
        i += 1
        
    print("Performed %d comparisons among Z matrices!" % i)
    # save mask
    mask = tmp
    
    return mask
    
def get_unit_vector(XYZ, idx):
    X = XYZ[0,idx[0],idx[1]]
    Y = XYZ[1,idx[0],idx[1]]
    Z = XYZ[2,idx[0],idx[1]]
    
    XYZ = np.array([X,Y,Z])
    xyz = XYZ/np.linalg.norm(XYZ)
    
    return xyz
# #########################
####### Main Program ######
###########################
    
# perform a search that finds indices amongst A B C matrices that represent 
# nearly identical locations in 3D space (say a tolerance of 1 meter in any 
# direction). The search is expandable to 4 hydrophones when the need arises.

# Compare matrices A and B
mask = correlate(A, B, 2)
print("Reduced total posibilities to %d in first search!" % len(mask))

# Compare matrices A and C, omitting and previously rejected values
mask = masked_correlate(A, C, 2, [i[0:2] for i in mask])
print("Reduced total posibilities to %d in second search!" % len(mask))

# Sort the mask to such that it yields ascending y values.
mask = sorted(mask, key=lambda mask: A[1,mask[0],mask[1]])

# Get unit vector pointing to pinger
max_idx = (mask[0][-1], mask[1][-1])
pinger_unit_vector = get_unit_vector(A, max_idx)

for (r1, c1, _, _) in mask:
    ax.scatter(A[0,r1,c1], A[1,r1,c1], A[2,r1,c1])
    
# Set Plotting limits
lim = 50
ax.set_xlim(-lim, lim)
ax.set_ylim(-lim, lim)
ax.set_zlim(-lim, lim)
plt.show()
                