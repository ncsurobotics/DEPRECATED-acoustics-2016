
LTC1564_Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000e94  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001848  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c5  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000381d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00003830  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000017c  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000028  00000000  00000000  000039ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000b9  00000000  00000000  00003a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
  8e:	0c 94 48 07 	jmp	0xe90	; 0xe90 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LTC1564_init>:
#include <avr/pgmspace.h>
#include <util/delay.h>
#include "LTC1564.h"

void LTC1564_init()
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	// Set Outputs to interface with the LTC
	LTC1564_f_DDR |= LTC1564_f_portMask;
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2a e2       	ldi	r18, 0x2A	; 42
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	20 81       	ld	r18, Z
  aa:	2f 60       	ori	r18, 0x0F	; 15
  ac:	fc 01       	movw	r30, r24
  ae:	20 83       	st	Z, r18
	LTC1564_g_DDR |= LTC1564_g_portMask;
  b0:	87 e2       	ldi	r24, 0x27	; 39
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	27 e2       	ldi	r18, 0x27	; 39
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	2f 60       	ori	r18, 0x0F	; 15
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	LTC1564_csBar_port |= 1<<LTC1564_csBar;
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	28 e2       	ldi	r18, 0x28	; 40
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	20 61       	ori	r18, 0x10	; 16
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	LTC1564_csBar_DDR |= LTC1564_csBar_portMask;
  d4:	87 e2       	ldi	r24, 0x27	; 39
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	27 e2       	ldi	r18, 0x27	; 39
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	20 81       	ld	r18, Z
  e0:	20 61       	ori	r18, 0x10	; 16
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18

}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <LTC1564_send>:

void LTC1564_send(int g, int f)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	a8 97       	sbiw	r28, 0x28	; 40
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	9e a3       	std	Y+38, r25	; 0x26
 102:	8d a3       	std	Y+37, r24	; 0x25
 104:	78 a7       	std	Y+40, r23	; 0x28
 106:	6f a3       	std	Y+39, r22	; 0x27
	// Inititalize vars
	int d[8] = {0};
 108:	20 e1       	ldi	r18, 0x10	; 16
 10a:	ce 01       	movw	r24, r28
 10c:	45 96       	adiw	r24, 0x15	; 21
 10e:	fc 01       	movw	r30, r24
 110:	32 2f       	mov	r19, r18
 112:	11 92       	st	Z+, r1
 114:	3a 95       	dec	r19
 116:	e9 f7       	brne	.-6      	; 0x112 <LTC1564_send+0x26>
	int i;
	int dSave = PIND;
 118:	89 e2       	ldi	r24, 0x29	; 41
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9c 83       	std	Y+4, r25	; 0x04
 126:	8b 83       	std	Y+3, r24	; 0x03
	int cSave = PINC;
 128:	86 e2       	ldi	r24, 0x26	; 38
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9e 83       	std	Y+6, r25	; 0x06
 136:	8d 83       	std	Y+5, r24	; 0x05


	// prepare g for output
	for(i = 0 ; g > 0;)
 138:	1a 82       	std	Y+2, r1	; 0x02
 13a:	19 82       	std	Y+1, r1	; 0x01
 13c:	26 c0       	rjmp	.+76     	; 0x18a <LTC1564_send+0x9e>
	{
		d[i] = g%2;
 13e:	8d a1       	ldd	r24, Y+37	; 0x25
 140:	9e a1       	ldd	r25, Y+38	; 0x26
 142:	81 70       	andi	r24, 0x01	; 1
 144:	90 78       	andi	r25, 0x80	; 128
 146:	99 23       	and	r25, r25
 148:	24 f4       	brge	.+8      	; 0x152 <LTC1564_send+0x66>
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	8e 6f       	ori	r24, 0xFE	; 254
 14e:	9f 6f       	ori	r25, 0xFF	; 255
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	9c 01       	movw	r18, r24
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	ae 01       	movw	r20, r28
 15e:	4f 5f       	subi	r20, 0xFF	; 255
 160:	5f 4f       	sbci	r21, 0xFF	; 255
 162:	84 0f       	add	r24, r20
 164:	95 1f       	adc	r25, r21
 166:	44 96       	adiw	r24, 0x14	; 20
 168:	fc 01       	movw	r30, r24
 16a:	31 83       	std	Z+1, r19	; 0x01
 16c:	20 83       	st	Z, r18
		i++;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	9a 83       	std	Y+2, r25	; 0x02
 176:	89 83       	std	Y+1, r24	; 0x01
		g = g/2;
 178:	8d a1       	ldd	r24, Y+37	; 0x25
 17a:	9e a1       	ldd	r25, Y+38	; 0x26
 17c:	99 23       	and	r25, r25
 17e:	0c f4       	brge	.+2      	; 0x182 <LTC1564_send+0x96>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	9e a3       	std	Y+38, r25	; 0x26
 188:	8d a3       	std	Y+37, r24	; 0x25
	int dSave = PIND;
	int cSave = PINC;


	// prepare g for output
	for(i = 0 ; g > 0;)
 18a:	8d a1       	ldd	r24, Y+37	; 0x25
 18c:	9e a1       	ldd	r25, Y+38	; 0x26
 18e:	18 16       	cp	r1, r24
 190:	19 06       	cpc	r1, r25
 192:	ac f2       	brlt	.-86     	; 0x13e <LTC1564_send+0x52>
		i++;
		g = g/2;
	}

	// output the g registers
	LTC1564_g_port = (LTC1564_g_pin & ~LTC1564_g_portMask) | (d[0]<<g0 | d[1]<<g1 | d[2]<<g2 | d[3]<<g3);
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	26 e2       	ldi	r18, 0x26	; 38
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	42 2f       	mov	r20, r18
 1a2:	40 7f       	andi	r20, 0xF0	; 240
 1a4:	2d 89       	ldd	r18, Y+21	; 0x15
 1a6:	3e 89       	ldd	r19, Y+22	; 0x16
 1a8:	52 2f       	mov	r21, r18
 1aa:	2f 89       	ldd	r18, Y+23	; 0x17
 1ac:	38 8d       	ldd	r19, Y+24	; 0x18
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	52 2b       	or	r21, r18
 1b4:	29 8d       	ldd	r18, Y+25	; 0x19
 1b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	52 2b       	or	r21, r18
 1c2:	2b 8d       	ldd	r18, Y+27	; 0x1b
 1c4:	3c 8d       	ldd	r19, Y+28	; 0x1c
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	25 2b       	or	r18, r21
 1d4:	24 2b       	or	r18, r20
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18


	// prepare f for output
	for(i = 0; f > 0;)
 1da:	1a 82       	std	Y+2, r1	; 0x02
 1dc:	19 82       	std	Y+1, r1	; 0x01
 1de:	26 c0       	rjmp	.+76     	; 0x22c <LTC1564_send+0x140>
	{
		d[i] = f%2;
 1e0:	8f a1       	ldd	r24, Y+39	; 0x27
 1e2:	98 a5       	ldd	r25, Y+40	; 0x28
 1e4:	81 70       	andi	r24, 0x01	; 1
 1e6:	90 78       	andi	r25, 0x80	; 128
 1e8:	99 23       	and	r25, r25
 1ea:	24 f4       	brge	.+8      	; 0x1f4 <LTC1564_send+0x108>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	8e 6f       	ori	r24, 0xFE	; 254
 1f0:	9f 6f       	ori	r25, 0xFF	; 255
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	9c 01       	movw	r18, r24
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	ae 01       	movw	r20, r28
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	84 0f       	add	r24, r20
 206:	95 1f       	adc	r25, r21
 208:	44 96       	adiw	r24, 0x14	; 20
 20a:	fc 01       	movw	r30, r24
 20c:	31 83       	std	Z+1, r19	; 0x01
 20e:	20 83       	st	Z, r18
		i++;
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	89 83       	std	Y+1, r24	; 0x01
		f = f/2;
 21a:	8f a1       	ldd	r24, Y+39	; 0x27
 21c:	98 a5       	ldd	r25, Y+40	; 0x28
 21e:	99 23       	and	r25, r25
 220:	0c f4       	brge	.+2      	; 0x224 <LTC1564_send+0x138>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	98 a7       	std	Y+40, r25	; 0x28
 22a:	8f a3       	std	Y+39, r24	; 0x27
	// output the g registers
	LTC1564_g_port = (LTC1564_g_pin & ~LTC1564_g_portMask) | (d[0]<<g0 | d[1]<<g1 | d[2]<<g2 | d[3]<<g3);


	// prepare f for output
	for(i = 0; f > 0;)
 22c:	8f a1       	ldd	r24, Y+39	; 0x27
 22e:	98 a5       	ldd	r25, Y+40	; 0x28
 230:	18 16       	cp	r1, r24
 232:	19 06       	cpc	r1, r25
 234:	ac f2       	brlt	.-86     	; 0x1e0 <LTC1564_send+0xf4>
		i++;
		f = f/2;
	}

	// output the f registers
	LTC1564_f_port = (LTC1564_f_pin & ~LTC1564_f_portMask) | (d[0]<<f0 | d[1]<<f1 | d[2]<<f2 | d[3]<<f3);
 236:	8b e2       	ldi	r24, 0x2B	; 43
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 e2       	ldi	r18, 0x29	; 41
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	20 81       	ld	r18, Z
 242:	42 2f       	mov	r20, r18
 244:	40 7f       	andi	r20, 0xF0	; 240
 246:	2d 89       	ldd	r18, Y+21	; 0x15
 248:	3e 89       	ldd	r19, Y+22	; 0x16
 24a:	52 2f       	mov	r21, r18
 24c:	2f 89       	ldd	r18, Y+23	; 0x17
 24e:	38 8d       	ldd	r19, Y+24	; 0x18
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	52 2b       	or	r21, r18
 256:	29 8d       	ldd	r18, Y+25	; 0x19
 258:	3a 8d       	ldd	r19, Y+26	; 0x1a
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	52 2b       	or	r21, r18
 264:	2b 8d       	ldd	r18, Y+27	; 0x1b
 266:	3c 8d       	ldd	r19, Y+28	; 0x1c
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	25 2b       	or	r18, r21
 276:	24 2b       	or	r18, r20
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18


	// set cf low for half a second
	LTC1564_csBar_port &= ~(1<<LTC1564_csBar);
 27c:	88 e2       	ldi	r24, 0x28	; 40
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 e2       	ldi	r18, 0x28	; 40
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	2f 7e       	andi	r18, 0xEF	; 239
 28a:	fc 01       	movw	r30, r24
 28c:	20 83       	st	Z, r18
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	aa ef       	ldi	r26, 0xFA	; 250
 294:	b3 e4       	ldi	r27, 0x43	; 67
 296:	8f 83       	std	Y+7, r24	; 0x07
 298:	98 87       	std	Y+8, r25	; 0x08
 29a:	a9 87       	std	Y+9, r26	; 0x09
 29c:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	4a e7       	ldi	r20, 0x7A	; 122
 2a4:	53 e4       	ldi	r21, 0x43	; 67
 2a6:	6f 81       	ldd	r22, Y+7	; 0x07
 2a8:	78 85       	ldd	r23, Y+8	; 0x08
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 2b2:	dc 01       	movw	r26, r24
 2b4:	cb 01       	movw	r24, r22
 2b6:	8b 87       	std	Y+11, r24	; 0x0b
 2b8:	9c 87       	std	Y+12, r25	; 0x0c
 2ba:	ad 87       	std	Y+13, r26	; 0x0d
 2bc:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e8       	ldi	r20, 0x80	; 128
 2c4:	5f e3       	ldi	r21, 0x3F	; 63
 2c6:	6b 85       	ldd	r22, Y+11	; 0x0b
 2c8:	7c 85       	ldd	r23, Y+12	; 0x0c
 2ca:	8d 85       	ldd	r24, Y+13	; 0x0d
 2cc:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ce:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
 2d2:	88 23       	and	r24, r24
 2d4:	2c f4       	brge	.+10     	; 0x2e0 <LTC1564_send+0x1f4>
		__ticks = 1;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	98 8b       	std	Y+16, r25	; 0x10
 2dc:	8f 87       	std	Y+15, r24	; 0x0f
 2de:	3f c0       	rjmp	.+126    	; 0x35e <LTC1564_send+0x272>
	else if (__tmp > 65535)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	3f ef       	ldi	r19, 0xFF	; 255
 2e4:	4f e7       	ldi	r20, 0x7F	; 127
 2e6:	57 e4       	ldi	r21, 0x47	; 71
 2e8:	6b 85       	ldd	r22, Y+11	; 0x0b
 2ea:	7c 85       	ldd	r23, Y+12	; 0x0c
 2ec:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ee:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f0:	0e 94 b9 06 	call	0xd72	; 0xd72 <__gesf2>
 2f4:	18 16       	cp	r1, r24
 2f6:	4c f5       	brge	.+82     	; 0x34a <LTC1564_send+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e2       	ldi	r20, 0x20	; 32
 2fe:	51 e4       	ldi	r21, 0x41	; 65
 300:	6f 81       	ldd	r22, Y+7	; 0x07
 302:	78 85       	ldd	r23, Y+8	; 0x08
 304:	89 85       	ldd	r24, Y+9	; 0x09
 306:	9a 85       	ldd	r25, Y+10	; 0x0a
 308:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 30c:	dc 01       	movw	r26, r24
 30e:	cb 01       	movw	r24, r22
 310:	bc 01       	movw	r22, r24
 312:	cd 01       	movw	r24, r26
 314:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixunssfsi>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22
 31c:	98 8b       	std	Y+16, r25	; 0x10
 31e:	8f 87       	std	Y+15, r24	; 0x0f
 320:	0f c0       	rjmp	.+30     	; 0x340 <LTC1564_send+0x254>
 322:	89 e1       	ldi	r24, 0x19	; 25
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9a 8b       	std	Y+18, r25	; 0x12
 328:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 32a:	89 89       	ldd	r24, Y+17	; 0x11
 32c:	9a 89       	ldd	r25, Y+18	; 0x12
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LTC1564_send+0x242>
 332:	9a 8b       	std	Y+18, r25	; 0x12
 334:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 336:	8f 85       	ldd	r24, Y+15	; 0x0f
 338:	98 89       	ldd	r25, Y+16	; 0x10
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	98 8b       	std	Y+16, r25	; 0x10
 33e:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 340:	8f 85       	ldd	r24, Y+15	; 0x0f
 342:	98 89       	ldd	r25, Y+16	; 0x10
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	69 f7       	brne	.-38     	; 0x322 <LTC1564_send+0x236>
 348:	14 c0       	rjmp	.+40     	; 0x372 <LTC1564_send+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34a:	6b 85       	ldd	r22, Y+11	; 0x0b
 34c:	7c 85       	ldd	r23, Y+12	; 0x0c
 34e:	8d 85       	ldd	r24, Y+13	; 0x0d
 350:	9e 85       	ldd	r25, Y+14	; 0x0e
 352:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixunssfsi>
 356:	dc 01       	movw	r26, r24
 358:	cb 01       	movw	r24, r22
 35a:	98 8b       	std	Y+16, r25	; 0x10
 35c:	8f 87       	std	Y+15, r24	; 0x0f
 35e:	8f 85       	ldd	r24, Y+15	; 0x0f
 360:	98 89       	ldd	r25, Y+16	; 0x10
 362:	9c 8b       	std	Y+20, r25	; 0x14
 364:	8b 8b       	std	Y+19, r24	; 0x13
 366:	8b 89       	ldd	r24, Y+19	; 0x13
 368:	9c 89       	ldd	r25, Y+20	; 0x14
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LTC1564_send+0x27e>
 36e:	9c 8b       	std	Y+20, r25	; 0x14
 370:	8b 8b       	std	Y+19, r24	; 0x13
	_delay_ms(500);

	// set the cf high
	LTC1564_csBar_port |= 1<<LTC1564_csBar;
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	28 e2       	ldi	r18, 0x28	; 40
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	20 61       	ori	r18, 0x10	; 16
 380:	fc 01       	movw	r30, r24
 382:	20 83       	st	Z, r18

	// return registers back to their previous state
	PORTD = dSave;
 384:	8b e2       	ldi	r24, 0x2B	; 43
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	2b 81       	ldd	r18, Y+3	; 0x03
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	PORTC = cSave;
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	2d 81       	ldd	r18, Y+5	; 0x05
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18
}
 398:	a8 96       	adiw	r28, 0x28	; 40
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <_delayFourCycles+0x6>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	9a 81       	ldd	r25, Y+2	; 0x02
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	11 f4       	brne	.+4      	; 0x3c4 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <_delayFourCycles+0x18>
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_delayFourCycles+0x1e>
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
 3e2:	82 e3       	ldi	r24, 0x32	; 50
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	22 e3       	ldi	r18, 0x32	; 50
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	20 81       	ld	r18, Z
 3ee:	24 60       	ori	r18, 0x04	; 4
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
    lcd_e_delay();
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <toggle_e+0x1c>
    lcd_e_low();
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	22 e3       	ldi	r18, 0x32	; 50
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	20 81       	ld	r18, Z
 402:	2b 7f       	andi	r18, 0xFB	; 251
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	00 d0       	rcall	.+0      	; 0x414 <lcd_write+0x6>
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	6a 83       	std	Y+2, r22	; 0x02
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	88 23       	and	r24, r24
 420:	51 f0       	breq	.+20     	; 0x436 <lcd_write+0x28>
       lcd_rs_high();
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	22 e3       	ldi	r18, 0x32	; 50
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	21 60       	ori	r18, 0x01	; 1
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
 434:	09 c0       	rjmp	.+18     	; 0x448 <lcd_write+0x3a>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 436:	82 e3       	ldi	r24, 0x32	; 50
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	22 e3       	ldi	r18, 0x32	; 50
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	2e 7f       	andi	r18, 0xFE	; 254
 444:	fc 01       	movw	r30, r24
 446:	20 83       	st	Z, r18
    }
    lcd_rw_low();
 448:	82 e3       	ldi	r24, 0x32	; 50
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	22 e3       	ldi	r18, 0x32	; 50
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	f9 01       	movw	r30, r18
 452:	20 81       	ld	r18, Z
 454:	2d 7f       	andi	r18, 0xFD	; 253
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 45a:	81 e3       	ldi	r24, 0x31	; 49
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	21 e3       	ldi	r18, 0x31	; 49
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	28 60       	ori	r18, 0x08	; 8
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 46c:	81 e3       	ldi	r24, 0x31	; 49
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	21 e3       	ldi	r18, 0x31	; 49
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	20 81       	ld	r18, Z
 478:	20 61       	ori	r18, 0x10	; 16
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 47e:	81 e3       	ldi	r24, 0x31	; 49
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	21 e3       	ldi	r18, 0x31	; 49
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	f9 01       	movw	r30, r18
 488:	20 81       	ld	r18, Z
 48a:	20 62       	ori	r18, 0x20	; 32
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 490:	81 e3       	ldi	r24, 0x31	; 49
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	21 e3       	ldi	r18, 0x31	; 49
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	f9 01       	movw	r30, r18
 49a:	20 81       	ld	r18, Z
 49c:	20 64       	ori	r18, 0x40	; 64
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 4a2:	82 e3       	ldi	r24, 0x32	; 50
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	22 e3       	ldi	r18, 0x32	; 50
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	20 81       	ld	r18, Z
 4ae:	2f 7b       	andi	r18, 0xBF	; 191
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	22 e3       	ldi	r18, 0x32	; 50
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	2f 7d       	andi	r18, 0xDF	; 223
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 4c6:	82 e3       	ldi	r24, 0x32	; 50
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	22 e3       	ldi	r18, 0x32	; 50
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	2f 7e       	andi	r18, 0xEF	; 239
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 83       	st	Z, r18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 4d8:	82 e3       	ldi	r24, 0x32	; 50
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	22 e3       	ldi	r18, 0x32	; 50
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	f9 01       	movw	r30, r18
 4e2:	20 81       	ld	r18, Z
 4e4:	27 7f       	andi	r18, 0xF7	; 247
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	88 23       	and	r24, r24
 4ee:	4c f4       	brge	.+18     	; 0x502 <lcd_write+0xf4>
 4f0:	82 e3       	ldi	r24, 0x32	; 50
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	22 e3       	ldi	r18, 0x32	; 50
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	f9 01       	movw	r30, r18
 4fa:	20 81       	ld	r18, Z
 4fc:	20 64       	ori	r18, 0x40	; 64
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	80 74       	andi	r24, 0x40	; 64
 50a:	99 27       	eor	r25, r25
 50c:	00 97       	sbiw	r24, 0x00	; 0
 50e:	49 f0       	breq	.+18     	; 0x522 <lcd_write+0x114>
 510:	82 e3       	ldi	r24, 0x32	; 50
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	22 e3       	ldi	r18, 0x32	; 50
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	20 62       	ori	r18, 0x20	; 32
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	80 72       	andi	r24, 0x20	; 32
 52a:	99 27       	eor	r25, r25
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	49 f0       	breq	.+18     	; 0x542 <lcd_write+0x134>
 530:	82 e3       	ldi	r24, 0x32	; 50
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	22 e3       	ldi	r18, 0x32	; 50
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	f9 01       	movw	r30, r18
 53a:	20 81       	ld	r18, Z
 53c:	20 61       	ori	r18, 0x10	; 16
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	80 71       	andi	r24, 0x10	; 16
 54a:	99 27       	eor	r25, r25
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	49 f0       	breq	.+18     	; 0x562 <lcd_write+0x154>
 550:	82 e3       	ldi	r24, 0x32	; 50
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	22 e3       	ldi	r18, 0x32	; 50
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	f9 01       	movw	r30, r18
 55a:	20 81       	ld	r18, Z
 55c:	28 60       	ori	r18, 0x08	; 8
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
        lcd_e_toggle();
 562:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 566:	82 e3       	ldi	r24, 0x32	; 50
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	22 e3       	ldi	r18, 0x32	; 50
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	f9 01       	movw	r30, r18
 570:	20 81       	ld	r18, Z
 572:	2f 7b       	andi	r18, 0xBF	; 191
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 578:	82 e3       	ldi	r24, 0x32	; 50
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	22 e3       	ldi	r18, 0x32	; 50
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	2f 7d       	andi	r18, 0xDF	; 223
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 58a:	82 e3       	ldi	r24, 0x32	; 50
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	22 e3       	ldi	r18, 0x32	; 50
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	2f 7e       	andi	r18, 0xEF	; 239
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 59c:	82 e3       	ldi	r24, 0x32	; 50
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	22 e3       	ldi	r18, 0x32	; 50
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	f9 01       	movw	r30, r18
 5a6:	20 81       	ld	r18, Z
 5a8:	27 7f       	andi	r18, 0xF7	; 247
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	88 2f       	mov	r24, r24
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	88 70       	andi	r24, 0x08	; 8
 5b6:	99 27       	eor	r25, r25
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	49 f0       	breq	.+18     	; 0x5ce <lcd_write+0x1c0>
 5bc:	82 e3       	ldi	r24, 0x32	; 50
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	22 e3       	ldi	r18, 0x32	; 50
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	20 81       	ld	r18, Z
 5c8:	20 64       	ori	r18, 0x40	; 64
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	88 2f       	mov	r24, r24
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	84 70       	andi	r24, 0x04	; 4
 5d6:	99 27       	eor	r25, r25
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	49 f0       	breq	.+18     	; 0x5ee <lcd_write+0x1e0>
 5dc:	82 e3       	ldi	r24, 0x32	; 50
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	22 e3       	ldi	r18, 0x32	; 50
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	20 81       	ld	r18, Z
 5e8:	20 62       	ori	r18, 0x20	; 32
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	82 70       	andi	r24, 0x02	; 2
 5f6:	99 27       	eor	r25, r25
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	49 f0       	breq	.+18     	; 0x60e <lcd_write+0x200>
 5fc:	82 e3       	ldi	r24, 0x32	; 50
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	22 e3       	ldi	r18, 0x32	; 50
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	20 61       	ori	r18, 0x10	; 16
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	88 2f       	mov	r24, r24
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	81 70       	andi	r24, 0x01	; 1
 616:	99 27       	eor	r25, r25
 618:	00 97       	sbiw	r24, 0x00	; 0
 61a:	49 f0       	breq	.+18     	; 0x62e <lcd_write+0x220>
 61c:	82 e3       	ldi	r24, 0x32	; 50
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	22 e3       	ldi	r18, 0x32	; 50
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	f9 01       	movw	r30, r18
 626:	20 81       	ld	r18, Z
 628:	28 60       	ori	r18, 0x08	; 8
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
        lcd_e_toggle();        
 62e:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 632:	82 e3       	ldi	r24, 0x32	; 50
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	22 e3       	ldi	r18, 0x32	; 50
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	f9 01       	movw	r30, r18
 63c:	20 81       	ld	r18, Z
 63e:	28 60       	ori	r18, 0x08	; 8
 640:	fc 01       	movw	r30, r24
 642:	20 83       	st	Z, r18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 644:	82 e3       	ldi	r24, 0x32	; 50
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	22 e3       	ldi	r18, 0x32	; 50
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	f9 01       	movw	r30, r18
 64e:	20 81       	ld	r18, Z
 650:	20 61       	ori	r18, 0x10	; 16
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 656:	82 e3       	ldi	r24, 0x32	; 50
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	22 e3       	ldi	r18, 0x32	; 50
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	f9 01       	movw	r30, r18
 660:	20 81       	ld	r18, Z
 662:	20 62       	ori	r18, 0x20	; 32
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 668:	82 e3       	ldi	r24, 0x32	; 50
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	22 e3       	ldi	r18, 0x32	; 50
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	f9 01       	movw	r30, r18
 672:	20 81       	ld	r18, Z
 674:	20 64       	ori	r18, 0x40	; 64
 676:	fc 01       	movw	r30, r24
 678:	20 83       	st	Z, r18
    }
}
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	08 95       	ret

00000684 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	00 d0       	rcall	.+0      	; 0x68a <lcd_read+0x6>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	88 23       	and	r24, r24
 694:	51 f0       	breq	.+20     	; 0x6aa <lcd_read+0x26>
        lcd_rs_high();                       /* RS=1: read data      */
 696:	82 e3       	ldi	r24, 0x32	; 50
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	22 e3       	ldi	r18, 0x32	; 50
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	f9 01       	movw	r30, r18
 6a0:	20 81       	ld	r18, Z
 6a2:	21 60       	ori	r18, 0x01	; 1
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 83       	st	Z, r18
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <lcd_read+0x38>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 6aa:	82 e3       	ldi	r24, 0x32	; 50
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	22 e3       	ldi	r18, 0x32	; 50
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	f9 01       	movw	r30, r18
 6b4:	20 81       	ld	r18, Z
 6b6:	2e 7f       	andi	r18, 0xFE	; 254
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
 6bc:	82 e3       	ldi	r24, 0x32	; 50
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	22 e3       	ldi	r18, 0x32	; 50
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	20 81       	ld	r18, Z
 6c8:	22 60       	ori	r18, 0x02	; 2
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 6ce:	81 e3       	ldi	r24, 0x31	; 49
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	21 e3       	ldi	r18, 0x31	; 49
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	27 7f       	andi	r18, 0xF7	; 247
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 6e0:	81 e3       	ldi	r24, 0x31	; 49
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	21 e3       	ldi	r18, 0x31	; 49
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	f9 01       	movw	r30, r18
 6ea:	20 81       	ld	r18, Z
 6ec:	2f 7e       	andi	r18, 0xEF	; 239
 6ee:	fc 01       	movw	r30, r24
 6f0:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 6f2:	81 e3       	ldi	r24, 0x31	; 49
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	21 e3       	ldi	r18, 0x31	; 49
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	20 81       	ld	r18, Z
 6fe:	2f 7d       	andi	r18, 0xDF	; 223
 700:	fc 01       	movw	r30, r24
 702:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 704:	81 e3       	ldi	r24, 0x31	; 49
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	21 e3       	ldi	r18, 0x31	; 49
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	f9 01       	movw	r30, r18
 70e:	20 81       	ld	r18, Z
 710:	2f 7b       	andi	r18, 0xBF	; 191
 712:	fc 01       	movw	r30, r24
 714:	20 83       	st	Z, r18
                
        /* read high nibble first */
        lcd_e_high();
 716:	82 e3       	ldi	r24, 0x32	; 50
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	22 e3       	ldi	r18, 0x32	; 50
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	f9 01       	movw	r30, r18
 720:	20 81       	ld	r18, Z
 722:	24 60       	ori	r18, 0x04	; 4
 724:	fc 01       	movw	r30, r24
 726:	20 83       	st	Z, r18
        lcd_e_delay();        
 728:	00 c0       	rjmp	.+0      	; 0x72a <lcd_read+0xa6>
        data = 0;
 72a:	19 82       	std	Y+1, r1	; 0x01
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 72c:	80 e3       	ldi	r24, 0x30	; 48
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	fc 01       	movw	r30, r24
 732:	80 81       	ld	r24, Z
 734:	88 2f       	mov	r24, r24
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	88 70       	andi	r24, 0x08	; 8
 73a:	99 27       	eor	r25, r25
 73c:	00 97       	sbiw	r24, 0x00	; 0
 73e:	19 f0       	breq	.+6      	; 0x746 <lcd_read+0xc2>
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	80 61       	ori	r24, 0x10	; 16
 744:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 746:	80 e3       	ldi	r24, 0x30	; 48
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	fc 01       	movw	r30, r24
 74c:	80 81       	ld	r24, Z
 74e:	88 2f       	mov	r24, r24
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	80 71       	andi	r24, 0x10	; 16
 754:	99 27       	eor	r25, r25
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	19 f0       	breq	.+6      	; 0x760 <lcd_read+0xdc>
 75a:	89 81       	ldd	r24, Y+1	; 0x01
 75c:	80 62       	ori	r24, 0x20	; 32
 75e:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 760:	80 e3       	ldi	r24, 0x30	; 48
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	fc 01       	movw	r30, r24
 766:	80 81       	ld	r24, Z
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	80 72       	andi	r24, 0x20	; 32
 76e:	99 27       	eor	r25, r25
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	19 f0       	breq	.+6      	; 0x77a <lcd_read+0xf6>
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	80 64       	ori	r24, 0x40	; 64
 778:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 77a:	80 e3       	ldi	r24, 0x30	; 48
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	fc 01       	movw	r30, r24
 780:	80 81       	ld	r24, Z
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	80 74       	andi	r24, 0x40	; 64
 788:	99 27       	eor	r25, r25
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	19 f0       	breq	.+6      	; 0x794 <lcd_read+0x110>
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	80 68       	ori	r24, 0x80	; 128
 792:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
 794:	82 e3       	ldi	r24, 0x32	; 50
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	22 e3       	ldi	r18, 0x32	; 50
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	f9 01       	movw	r30, r18
 79e:	20 81       	ld	r18, Z
 7a0:	2b 7f       	andi	r18, 0xFB	; 251
 7a2:	fc 01       	movw	r30, r24
 7a4:	20 83       	st	Z, r18

        lcd_e_delay();                       /* Enable 500ns low       */
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <lcd_read+0x124>
    
        /* read low nibble */    
        lcd_e_high();
 7a8:	82 e3       	ldi	r24, 0x32	; 50
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	22 e3       	ldi	r18, 0x32	; 50
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	f9 01       	movw	r30, r18
 7b2:	20 81       	ld	r18, Z
 7b4:	24 60       	ori	r18, 0x04	; 4
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
        lcd_e_delay();
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <lcd_read+0x138>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 7bc:	80 e3       	ldi	r24, 0x30	; 48
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	fc 01       	movw	r30, r24
 7c2:	80 81       	ld	r24, Z
 7c4:	88 2f       	mov	r24, r24
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	88 70       	andi	r24, 0x08	; 8
 7ca:	99 27       	eor	r25, r25
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <lcd_read+0x152>
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	81 60       	ori	r24, 0x01	; 1
 7d4:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 7d6:	80 e3       	ldi	r24, 0x30	; 48
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	fc 01       	movw	r30, r24
 7dc:	80 81       	ld	r24, Z
 7de:	88 2f       	mov	r24, r24
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	80 71       	andi	r24, 0x10	; 16
 7e4:	99 27       	eor	r25, r25
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	19 f0       	breq	.+6      	; 0x7f0 <lcd_read+0x16c>
 7ea:	89 81       	ldd	r24, Y+1	; 0x01
 7ec:	82 60       	ori	r24, 0x02	; 2
 7ee:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 7f0:	80 e3       	ldi	r24, 0x30	; 48
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	fc 01       	movw	r30, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	88 2f       	mov	r24, r24
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	80 72       	andi	r24, 0x20	; 32
 7fe:	99 27       	eor	r25, r25
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	19 f0       	breq	.+6      	; 0x80a <lcd_read+0x186>
 804:	89 81       	ldd	r24, Y+1	; 0x01
 806:	84 60       	ori	r24, 0x04	; 4
 808:	89 83       	std	Y+1, r24	; 0x01
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 80a:	80 e3       	ldi	r24, 0x30	; 48
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	80 81       	ld	r24, Z
 812:	88 2f       	mov	r24, r24
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	80 74       	andi	r24, 0x40	; 64
 818:	99 27       	eor	r25, r25
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	19 f0       	breq	.+6      	; 0x824 <lcd_read+0x1a0>
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	88 60       	ori	r24, 0x08	; 8
 822:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
 824:	82 e3       	ldi	r24, 0x32	; 50
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	22 e3       	ldi	r18, 0x32	; 50
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	f9 01       	movw	r30, r18
 82e:	20 81       	ld	r18, Z
 830:	2b 7f       	andi	r18, 0xFB	; 251
 832:	fc 01       	movw	r30, r24
 834:	20 83       	st	Z, r18
    }
    return data;
 836:	89 81       	ldd	r24, Y+1	; 0x01
}
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	0e 94 42 03 	call	0x684	; 0x684 <lcd_read>
 852:	18 2f       	mov	r17, r24
 854:	81 2f       	mov	r24, r17
 856:	88 23       	and	r24, r24
 858:	cc f3       	brlt	.-14     	; 0x84c <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
 85a:	88 e0       	ldi	r24, 0x08	; 8
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	0e 94 42 03 	call	0x684	; 0x684 <lcd_read>
    
}/* lcd_waitbusy */
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	08 95       	ret

00000870 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	1f 92       	push	r1
 878:	cd b7       	in	r28, 0x3d	; 61
 87a:	de b7       	in	r29, 0x3e	; 62
 87c:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 87e:	89 81       	ldd	r24, Y+1	; 0x01
 880:	80 34       	cpi	r24, 0x40	; 64
 882:	10 f4       	brcc	.+4      	; 0x888 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
 884:	10 e4       	ldi	r17, 0x40	; 64
 886:	01 c0       	rjmp	.+2      	; 0x88a <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
 888:	10 e0       	ldi	r17, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	81 0f       	add	r24, r17
 88e:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>

}/* lcd_newline */
 892:	0f 90       	pop	r0
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	08 95       	ret

0000089c <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	1f 92       	push	r1
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
 8a8:	0e 94 21 04 	call	0x842	; 0x842 <lcd_waitbusy>
    lcd_write(cmd,0);
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	0e 94 07 02 	call	0x40e	; 0x40e <lcd_write>
}
 8b4:	0f 90       	pop	r0
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	08 95       	ret

000008bc <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	1f 92       	push	r1
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
 8c6:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
 8c8:	0e 94 21 04 	call	0x842	; 0x842 <lcd_waitbusy>
    lcd_write(data,1);
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	0e 94 07 02 	call	0x40e	; 0x40e <lcd_write>
}
 8d4:	0f 90       	pop	r0
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <lcd_gotoxy+0x6>
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	88 23       	and	r24, r24
 8ee:	29 f4       	brne	.+10     	; 0x8fa <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 8f0:	89 81       	ldd	r24, Y+1	; 0x01
 8f2:	80 58       	subi	r24, 0x80	; 128
 8f4:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
 8f8:	04 c0       	rjmp	.+8      	; 0x902 <__stack+0x3>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 8fa:	89 81       	ldd	r24, Y+1	; 0x01
 8fc:	80 54       	subi	r24, 0x40	; 64
 8fe:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
 914:	0e 94 21 04 	call	0x842	; 0x842 <lcd_waitbusy>
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	cd b7       	in	r28, 0x3d	; 61
 928:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
}
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

00000936 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
}
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	08 95       	ret

0000094a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	00 d0       	rcall	.+0      	; 0x950 <lcd_putc+0x6>
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 956:	0e 94 21 04 	call	0x842	; 0x842 <lcd_waitbusy>
 95a:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	8a 30       	cpi	r24, 0x0A	; 10
 960:	21 f4       	brne	.+8      	; 0x96a <lcd_putc+0x20>
    {
        lcd_newline(pos);
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	0e 94 38 04 	call	0x870	; 0x870 <lcd_newline>
 968:	04 c0       	rjmp	.+8      	; 0x972 <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 96a:	61 e0       	ldi	r22, 0x01	; 1
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	0e 94 07 02 	call	0x40e	; 0x40e <lcd_write>
    }

}/* lcd_putc */
 972:	0f 90       	pop	r0
 974:	0f 90       	pop	r0
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	08 95       	ret

0000097c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	00 d0       	rcall	.+0      	; 0x984 <lcd_puts+0x8>
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	9a 83       	std	Y+2, r25	; 0x02
 98a:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
 98c:	03 c0       	rjmp	.+6      	; 0x994 <lcd_puts+0x18>
        lcd_putc(c);
 98e:	81 2f       	mov	r24, r17
 990:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	9a 81       	ldd	r25, Y+2	; 0x02
 998:	9c 01       	movw	r18, r24
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	3a 83       	std	Y+2, r19	; 0x02
 9a0:	29 83       	std	Y+1, r18	; 0x01
 9a2:	fc 01       	movw	r30, r24
 9a4:	10 81       	ld	r17, Z
 9a6:	11 23       	and	r17, r17
 9a8:	91 f7       	brne	.-28     	; 0x98e <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
 9aa:	0f 90       	pop	r0
 9ac:	0f 90       	pop	r0
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	08 95       	ret

000009b6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	00 d0       	rcall	.+0      	; 0x9be <lcd_puts_p+0x8>
 9be:	00 d0       	rcall	.+0      	; 0x9c0 <lcd_puts_p+0xa>
 9c0:	1f 92       	push	r1
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	9d 83       	std	Y+5, r25	; 0x05
 9c8:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <lcd_puts_p+0x1c>
        lcd_putc(c);
 9cc:	81 2f       	mov	r24, r17
 9ce:	0e 94 a5 04 	call	0x94a	; 0x94a <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 9d2:	8c 81       	ldd	r24, Y+4	; 0x04
 9d4:	9d 81       	ldd	r25, Y+5	; 0x05
 9d6:	9c 01       	movw	r18, r24
 9d8:	2f 5f       	subi	r18, 0xFF	; 255
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	3d 83       	std	Y+5, r19	; 0x05
 9de:	2c 83       	std	Y+4, r18	; 0x04
 9e0:	9a 83       	std	Y+2, r25	; 0x02
 9e2:	89 83       	std	Y+1, r24	; 0x01
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	fc 01       	movw	r30, r24
 9ea:	84 91       	lpm	r24, Z
 9ec:	8b 83       	std	Y+3, r24	; 0x03
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	18 2f       	mov	r17, r24
 9f2:	11 23       	and	r17, r17
 9f4:	59 f7       	brne	.-42     	; 0x9cc <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	0f 90       	pop	r0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	08 95       	ret

00000a08 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	1f 92       	push	r1
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	89 83       	std	Y+1, r24	; 0x01
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 a14:	81 e3       	ldi	r24, 0x31	; 49
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	21 e3       	ldi	r18, 0x31	; 49
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	f9 01       	movw	r30, r18
 a1e:	20 81       	ld	r18, Z
 a20:	21 60       	ori	r18, 0x01	; 1
 a22:	fc 01       	movw	r30, r24
 a24:	20 83       	st	Z, r18
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 a26:	81 e3       	ldi	r24, 0x31	; 49
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	21 e3       	ldi	r18, 0x31	; 49
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	f9 01       	movw	r30, r18
 a30:	20 81       	ld	r18, Z
 a32:	22 60       	ori	r18, 0x02	; 2
 a34:	fc 01       	movw	r30, r24
 a36:	20 83       	st	Z, r18
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 a38:	81 e3       	ldi	r24, 0x31	; 49
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	21 e3       	ldi	r18, 0x31	; 49
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	f9 01       	movw	r30, r18
 a42:	20 81       	ld	r18, Z
 a44:	24 60       	ori	r18, 0x04	; 4
 a46:	fc 01       	movw	r30, r24
 a48:	20 83       	st	Z, r18
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 a4a:	81 e3       	ldi	r24, 0x31	; 49
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	21 e3       	ldi	r18, 0x31	; 49
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	f9 01       	movw	r30, r18
 a54:	20 81       	ld	r18, Z
 a56:	28 60       	ori	r18, 0x08	; 8
 a58:	fc 01       	movw	r30, r24
 a5a:	20 83       	st	Z, r18
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 a5c:	81 e3       	ldi	r24, 0x31	; 49
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	21 e3       	ldi	r18, 0x31	; 49
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	f9 01       	movw	r30, r18
 a66:	20 81       	ld	r18, Z
 a68:	20 61       	ori	r18, 0x10	; 16
 a6a:	fc 01       	movw	r30, r24
 a6c:	20 83       	st	Z, r18
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 a6e:	81 e3       	ldi	r24, 0x31	; 49
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	21 e3       	ldi	r18, 0x31	; 49
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	f9 01       	movw	r30, r18
 a78:	20 81       	ld	r18, Z
 a7a:	20 62       	ori	r18, 0x20	; 32
 a7c:	fc 01       	movw	r30, r24
 a7e:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 a80:	81 e3       	ldi	r24, 0x31	; 49
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	21 e3       	ldi	r18, 0x31	; 49
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	f9 01       	movw	r30, r18
 a8a:	20 81       	ld	r18, Z
 a8c:	20 64       	ori	r18, 0x40	; 64
 a8e:	fc 01       	movw	r30, r24
 a90:	20 83       	st	Z, r18
    }
    delay(16000);        /* wait 16ms or more after power-on       */
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	9a ef       	ldi	r25, 0xFA	; 250
 a96:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 a9a:	82 e3       	ldi	r24, 0x32	; 50
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	22 e3       	ldi	r18, 0x32	; 50
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	f9 01       	movw	r30, r18
 aa4:	20 81       	ld	r18, Z
 aa6:	20 61       	ori	r18, 0x10	; 16
 aa8:	fc 01       	movw	r30, r24
 aaa:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 aac:	82 e3       	ldi	r24, 0x32	; 50
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	22 e3       	ldi	r18, 0x32	; 50
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	f9 01       	movw	r30, r18
 ab6:	20 81       	ld	r18, Z
 ab8:	28 60       	ori	r18, 0x08	; 8
 aba:	fc 01       	movw	r30, r24
 abc:	20 83       	st	Z, r18
    lcd_e_toggle();
 abe:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	9e e4       	ldi	r25, 0x4E	; 78
 ac6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
 aca:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	91 e0       	ldi	r25, 0x01	; 1
 ad2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 ad6:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	91 e0       	ldi	r25, 0x01	; 1
 ade:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 ae2:	82 e3       	ldi	r24, 0x32	; 50
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	22 e3       	ldi	r18, 0x32	; 50
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	f9 01       	movw	r30, r18
 aec:	20 81       	ld	r18, Z
 aee:	27 7f       	andi	r18, 0xF7	; 247
 af0:	fc 01       	movw	r30, r24
 af2:	20 83       	st	Z, r18
    lcd_e_toggle();
 af4:	0e 94 ed 01 	call	0x3da	; 0x3da <toggle_e>
    delay(64);           /* some displays need this additional delay */
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 b00:	88 e2       	ldi	r24, 0x28	; 40
 b02:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 b06:	88 e0       	ldi	r24, 0x08	; 8
 b08:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 b0c:	0e 94 91 04 	call	0x922	; 0x922 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 b10:	86 e0       	ldi	r24, 0x06	; 6
 b12:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 b16:	89 81       	ldd	r24, Y+1	; 0x01
 b18:	0e 94 4e 04 	call	0x89c	; 0x89c <lcd_command>

}/* lcd_init */
 b1c:	0f 90       	pop	r0
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	08 95       	ret

00000b24 <Init_Avr>:
 */

#define F_CPU 16000000UL

void Init_Avr()
{
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	cd b7       	in	r28, 0x3d	; 61
 b2a:	de b7       	in	r29, 0x3e	; 62
	// Do nothing
}
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	08 95       	ret

00000b32 <main>:

void main()
{
 b32:	cf 93       	push	r28
 b34:	df 93       	push	r29
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	2e 97       	sbiw	r28, 0x0e	; 14
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	de bf       	out	0x3e, r29	; 62
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	cd bf       	out	0x3d, r28	; 61
	// Initialize AVR
	Init_Avr();
 b46:	0e 94 92 05 	call	0xb24	; 0xb24 <Init_Avr>

	// Initialize LCD
	lcd_init(LCD_DISP_ON);
 b4a:	8c e0       	ldi	r24, 0x0C	; 12
 b4c:	0e 94 04 05 	call	0xa08	; 0xa08 <lcd_init>
	lcd_clrscr();
 b50:	0e 94 91 04 	call	0x922	; 0x922 <lcd_clrscr>
	lcd_puts("LTC1564");
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	91 e0       	ldi	r25, 0x01	; 1
 b58:	0e 94 be 04 	call	0x97c	; 0x97c <lcd_puts>

	// Initialize LTC1564
	LTC1564_init();
 b5c:	0e 94 4b 00 	call	0x96	; 0x96 <LTC1564_init>

	LTC1564_send(0,1);
 b60:	61 e0       	ldi	r22, 0x01	; 1
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 76 00 	call	0xec	; 0xec <LTC1564_send>

	for(DDRD |= 1<<7;;){
 b6c:	8a e2       	ldi	r24, 0x2A	; 42
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	2a e2       	ldi	r18, 0x2A	; 42
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	f9 01       	movw	r30, r18
 b76:	20 81       	ld	r18, Z
 b78:	20 68       	ori	r18, 0x80	; 128
 b7a:	fc 01       	movw	r30, r24
 b7c:	20 83       	st	Z, r18
		PORTD ^= 1<<7; // Blink LED
 b7e:	8b e2       	ldi	r24, 0x2B	; 43
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	2b e2       	ldi	r18, 0x2B	; 43
 b84:	30 e0       	ldi	r19, 0x00	; 0
 b86:	f9 01       	movw	r30, r18
 b88:	30 81       	ld	r19, Z
 b8a:	20 e8       	ldi	r18, 0x80	; 128
 b8c:	23 27       	eor	r18, r19
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	aa e7       	ldi	r26, 0x7A	; 122
 b98:	b4 e4       	ldi	r27, 0x44	; 68
 b9a:	89 83       	std	Y+1, r24	; 0x01
 b9c:	9a 83       	std	Y+2, r25	; 0x02
 b9e:	ab 83       	std	Y+3, r26	; 0x03
 ba0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 ba2:	20 e0       	ldi	r18, 0x00	; 0
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	4a e7       	ldi	r20, 0x7A	; 122
 ba8:	53 e4       	ldi	r21, 0x43	; 67
 baa:	69 81       	ldd	r22, Y+1	; 0x01
 bac:	7a 81       	ldd	r23, Y+2	; 0x02
 bae:	8b 81       	ldd	r24, Y+3	; 0x03
 bb0:	9c 81       	ldd	r25, Y+4	; 0x04
 bb2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 bb6:	dc 01       	movw	r26, r24
 bb8:	cb 01       	movw	r24, r22
 bba:	8d 83       	std	Y+5, r24	; 0x05
 bbc:	9e 83       	std	Y+6, r25	; 0x06
 bbe:	af 83       	std	Y+7, r26	; 0x07
 bc0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 bc2:	20 e0       	ldi	r18, 0x00	; 0
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	40 e8       	ldi	r20, 0x80	; 128
 bc8:	5f e3       	ldi	r21, 0x3F	; 63
 bca:	6d 81       	ldd	r22, Y+5	; 0x05
 bcc:	7e 81       	ldd	r23, Y+6	; 0x06
 bce:	8f 81       	ldd	r24, Y+7	; 0x07
 bd0:	98 85       	ldd	r25, Y+8	; 0x08
 bd2:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
 bd6:	88 23       	and	r24, r24
 bd8:	2c f4       	brge	.+10     	; 0xbe4 <main+0xb2>
		__ticks = 1;
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	9a 87       	std	Y+10, r25	; 0x0a
 be0:	89 87       	std	Y+9, r24	; 0x09
 be2:	3f c0       	rjmp	.+126    	; 0xc62 <main+0x130>
	else if (__tmp > 65535)
 be4:	20 e0       	ldi	r18, 0x00	; 0
 be6:	3f ef       	ldi	r19, 0xFF	; 255
 be8:	4f e7       	ldi	r20, 0x7F	; 127
 bea:	57 e4       	ldi	r21, 0x47	; 71
 bec:	6d 81       	ldd	r22, Y+5	; 0x05
 bee:	7e 81       	ldd	r23, Y+6	; 0x06
 bf0:	8f 81       	ldd	r24, Y+7	; 0x07
 bf2:	98 85       	ldd	r25, Y+8	; 0x08
 bf4:	0e 94 b9 06 	call	0xd72	; 0xd72 <__gesf2>
 bf8:	18 16       	cp	r1, r24
 bfa:	4c f5       	brge	.+82     	; 0xc4e <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 bfc:	20 e0       	ldi	r18, 0x00	; 0
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	40 e2       	ldi	r20, 0x20	; 32
 c02:	51 e4       	ldi	r21, 0x41	; 65
 c04:	69 81       	ldd	r22, Y+1	; 0x01
 c06:	7a 81       	ldd	r23, Y+2	; 0x02
 c08:	8b 81       	ldd	r24, Y+3	; 0x03
 c0a:	9c 81       	ldd	r25, Y+4	; 0x04
 c0c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 c10:	dc 01       	movw	r26, r24
 c12:	cb 01       	movw	r24, r22
 c14:	bc 01       	movw	r22, r24
 c16:	cd 01       	movw	r24, r26
 c18:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixunssfsi>
 c1c:	dc 01       	movw	r26, r24
 c1e:	cb 01       	movw	r24, r22
 c20:	9a 87       	std	Y+10, r25	; 0x0a
 c22:	89 87       	std	Y+9, r24	; 0x09
 c24:	0f c0       	rjmp	.+30     	; 0xc44 <main+0x112>
 c26:	89 e1       	ldi	r24, 0x19	; 25
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	9c 87       	std	Y+12, r25	; 0x0c
 c2c:	8b 87       	std	Y+11, r24	; 0x0b
 c2e:	8b 85       	ldd	r24, Y+11	; 0x0b
 c30:	9c 85       	ldd	r25, Y+12	; 0x0c
 c32:	01 97       	sbiw	r24, 0x01	; 1
 c34:	f1 f7       	brne	.-4      	; 0xc32 <main+0x100>
 c36:	9c 87       	std	Y+12, r25	; 0x0c
 c38:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c3a:	89 85       	ldd	r24, Y+9	; 0x09
 c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
 c3e:	01 97       	sbiw	r24, 0x01	; 1
 c40:	9a 87       	std	Y+10, r25	; 0x0a
 c42:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c44:	89 85       	ldd	r24, Y+9	; 0x09
 c46:	9a 85       	ldd	r25, Y+10	; 0x0a
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	69 f7       	brne	.-38     	; 0xc26 <main+0xf4>
		_delay_ms(1000);
	}
 c4c:	98 cf       	rjmp	.-208    	; 0xb7e <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 c4e:	6d 81       	ldd	r22, Y+5	; 0x05
 c50:	7e 81       	ldd	r23, Y+6	; 0x06
 c52:	8f 81       	ldd	r24, Y+7	; 0x07
 c54:	98 85       	ldd	r25, Y+8	; 0x08
 c56:	0e 94 40 06 	call	0xc80	; 0xc80 <__fixunssfsi>
 c5a:	dc 01       	movw	r26, r24
 c5c:	cb 01       	movw	r24, r22
 c5e:	9a 87       	std	Y+10, r25	; 0x0a
 c60:	89 87       	std	Y+9, r24	; 0x09
 c62:	89 85       	ldd	r24, Y+9	; 0x09
 c64:	9a 85       	ldd	r25, Y+10	; 0x0a
 c66:	9e 87       	std	Y+14, r25	; 0x0e
 c68:	8d 87       	std	Y+13, r24	; 0x0d
 c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
 c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
 c6e:	01 97       	sbiw	r24, 0x01	; 1
 c70:	f1 f7       	brne	.-4      	; 0xc6e <main+0x13c>
 c72:	9e 87       	std	Y+14, r25	; 0x0e
 c74:	8d 87       	std	Y+13, r24	; 0x0d
 c76:	83 cf       	rjmp	.-250    	; 0xb7e <main+0x4c>

00000c78 <__cmpsf2>:
 c78:	2f d0       	rcall	.+94     	; 0xcd8 <__fp_cmp>
 c7a:	08 f4       	brcc	.+2      	; 0xc7e <__cmpsf2+0x6>
 c7c:	81 e0       	ldi	r24, 0x01	; 1
 c7e:	08 95       	ret

00000c80 <__fixunssfsi>:
 c80:	57 d0       	rcall	.+174    	; 0xd30 <__fp_splitA>
 c82:	88 f0       	brcs	.+34     	; 0xca6 <__fixunssfsi+0x26>
 c84:	9f 57       	subi	r25, 0x7F	; 127
 c86:	90 f0       	brcs	.+36     	; 0xcac <__fixunssfsi+0x2c>
 c88:	b9 2f       	mov	r27, r25
 c8a:	99 27       	eor	r25, r25
 c8c:	b7 51       	subi	r27, 0x17	; 23
 c8e:	a0 f0       	brcs	.+40     	; 0xcb8 <__fixunssfsi+0x38>
 c90:	d1 f0       	breq	.+52     	; 0xcc6 <__fixunssfsi+0x46>
 c92:	66 0f       	add	r22, r22
 c94:	77 1f       	adc	r23, r23
 c96:	88 1f       	adc	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	1a f0       	brmi	.+6      	; 0xca2 <__fixunssfsi+0x22>
 c9c:	ba 95       	dec	r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__fixunssfsi+0x12>
 ca0:	12 c0       	rjmp	.+36     	; 0xcc6 <__fixunssfsi+0x46>
 ca2:	b1 30       	cpi	r27, 0x01	; 1
 ca4:	81 f0       	breq	.+32     	; 0xcc6 <__fixunssfsi+0x46>
 ca6:	5e d0       	rcall	.+188    	; 0xd64 <__fp_zero>
 ca8:	b1 e0       	ldi	r27, 0x01	; 1
 caa:	08 95       	ret
 cac:	5b c0       	rjmp	.+182    	; 0xd64 <__fp_zero>
 cae:	67 2f       	mov	r22, r23
 cb0:	78 2f       	mov	r23, r24
 cb2:	88 27       	eor	r24, r24
 cb4:	b8 5f       	subi	r27, 0xF8	; 248
 cb6:	39 f0       	breq	.+14     	; 0xcc6 <__fixunssfsi+0x46>
 cb8:	b9 3f       	cpi	r27, 0xF9	; 249
 cba:	cc f3       	brlt	.-14     	; 0xcae <__fixunssfsi+0x2e>
 cbc:	86 95       	lsr	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b3 95       	inc	r27
 cc4:	d9 f7       	brne	.-10     	; 0xcbc <__fixunssfsi+0x3c>
 cc6:	3e f4       	brtc	.+14     	; 0xcd6 <__fixunssfsi+0x56>
 cc8:	90 95       	com	r25
 cca:	80 95       	com	r24
 ccc:	70 95       	com	r23
 cce:	61 95       	neg	r22
 cd0:	7f 4f       	sbci	r23, 0xFF	; 255
 cd2:	8f 4f       	sbci	r24, 0xFF	; 255
 cd4:	9f 4f       	sbci	r25, 0xFF	; 255
 cd6:	08 95       	ret

00000cd8 <__fp_cmp>:
 cd8:	99 0f       	add	r25, r25
 cda:	00 08       	sbc	r0, r0
 cdc:	55 0f       	add	r21, r21
 cde:	aa 0b       	sbc	r26, r26
 ce0:	e0 e8       	ldi	r30, 0x80	; 128
 ce2:	fe ef       	ldi	r31, 0xFE	; 254
 ce4:	16 16       	cp	r1, r22
 ce6:	17 06       	cpc	r1, r23
 ce8:	e8 07       	cpc	r30, r24
 cea:	f9 07       	cpc	r31, r25
 cec:	c0 f0       	brcs	.+48     	; 0xd1e <__fp_cmp+0x46>
 cee:	12 16       	cp	r1, r18
 cf0:	13 06       	cpc	r1, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	98 f0       	brcs	.+38     	; 0xd1e <__fp_cmp+0x46>
 cf8:	62 1b       	sub	r22, r18
 cfa:	73 0b       	sbc	r23, r19
 cfc:	84 0b       	sbc	r24, r20
 cfe:	95 0b       	sbc	r25, r21
 d00:	39 f4       	brne	.+14     	; 0xd10 <__fp_cmp+0x38>
 d02:	0a 26       	eor	r0, r26
 d04:	61 f0       	breq	.+24     	; 0xd1e <__fp_cmp+0x46>
 d06:	23 2b       	or	r18, r19
 d08:	24 2b       	or	r18, r20
 d0a:	25 2b       	or	r18, r21
 d0c:	21 f4       	brne	.+8      	; 0xd16 <__fp_cmp+0x3e>
 d0e:	08 95       	ret
 d10:	0a 26       	eor	r0, r26
 d12:	09 f4       	brne	.+2      	; 0xd16 <__fp_cmp+0x3e>
 d14:	a1 40       	sbci	r26, 0x01	; 1
 d16:	a6 95       	lsr	r26
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	81 1d       	adc	r24, r1
 d1c:	81 1d       	adc	r24, r1
 d1e:	08 95       	ret

00000d20 <__fp_split3>:
 d20:	57 fd       	sbrc	r21, 7
 d22:	90 58       	subi	r25, 0x80	; 128
 d24:	44 0f       	add	r20, r20
 d26:	55 1f       	adc	r21, r21
 d28:	59 f0       	breq	.+22     	; 0xd40 <__fp_splitA+0x10>
 d2a:	5f 3f       	cpi	r21, 0xFF	; 255
 d2c:	71 f0       	breq	.+28     	; 0xd4a <__fp_splitA+0x1a>
 d2e:	47 95       	ror	r20

00000d30 <__fp_splitA>:
 d30:	88 0f       	add	r24, r24
 d32:	97 fb       	bst	r25, 7
 d34:	99 1f       	adc	r25, r25
 d36:	61 f0       	breq	.+24     	; 0xd50 <__fp_splitA+0x20>
 d38:	9f 3f       	cpi	r25, 0xFF	; 255
 d3a:	79 f0       	breq	.+30     	; 0xd5a <__fp_splitA+0x2a>
 d3c:	87 95       	ror	r24
 d3e:	08 95       	ret
 d40:	12 16       	cp	r1, r18
 d42:	13 06       	cpc	r1, r19
 d44:	14 06       	cpc	r1, r20
 d46:	55 1f       	adc	r21, r21
 d48:	f2 cf       	rjmp	.-28     	; 0xd2e <__fp_split3+0xe>
 d4a:	46 95       	lsr	r20
 d4c:	f1 df       	rcall	.-30     	; 0xd30 <__fp_splitA>
 d4e:	08 c0       	rjmp	.+16     	; 0xd60 <__fp_splitA+0x30>
 d50:	16 16       	cp	r1, r22
 d52:	17 06       	cpc	r1, r23
 d54:	18 06       	cpc	r1, r24
 d56:	99 1f       	adc	r25, r25
 d58:	f1 cf       	rjmp	.-30     	; 0xd3c <__fp_splitA+0xc>
 d5a:	86 95       	lsr	r24
 d5c:	71 05       	cpc	r23, r1
 d5e:	61 05       	cpc	r22, r1
 d60:	08 94       	sec
 d62:	08 95       	ret

00000d64 <__fp_zero>:
 d64:	e8 94       	clt

00000d66 <__fp_szero>:
 d66:	bb 27       	eor	r27, r27
 d68:	66 27       	eor	r22, r22
 d6a:	77 27       	eor	r23, r23
 d6c:	cb 01       	movw	r24, r22
 d6e:	97 f9       	bld	r25, 7
 d70:	08 95       	ret

00000d72 <__gesf2>:
 d72:	b2 df       	rcall	.-156    	; 0xcd8 <__fp_cmp>
 d74:	08 f4       	brcc	.+2      	; 0xd78 <__gesf2+0x6>
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	08 95       	ret

00000d7a <__mulsf3>:
 d7a:	0b d0       	rcall	.+22     	; 0xd92 <__mulsf3x>
 d7c:	78 c0       	rjmp	.+240    	; 0xe6e <__fp_round>
 d7e:	69 d0       	rcall	.+210    	; 0xe52 <__fp_pscA>
 d80:	28 f0       	brcs	.+10     	; 0xd8c <__mulsf3+0x12>
 d82:	6e d0       	rcall	.+220    	; 0xe60 <__fp_pscB>
 d84:	18 f0       	brcs	.+6      	; 0xd8c <__mulsf3+0x12>
 d86:	95 23       	and	r25, r21
 d88:	09 f0       	breq	.+2      	; 0xd8c <__mulsf3+0x12>
 d8a:	5a c0       	rjmp	.+180    	; 0xe40 <__fp_inf>
 d8c:	5f c0       	rjmp	.+190    	; 0xe4c <__fp_nan>
 d8e:	11 24       	eor	r1, r1
 d90:	ea cf       	rjmp	.-44     	; 0xd66 <__fp_szero>

00000d92 <__mulsf3x>:
 d92:	c6 df       	rcall	.-116    	; 0xd20 <__fp_split3>
 d94:	a0 f3       	brcs	.-24     	; 0xd7e <__mulsf3+0x4>

00000d96 <__mulsf3_pse>:
 d96:	95 9f       	mul	r25, r21
 d98:	d1 f3       	breq	.-12     	; 0xd8e <__mulsf3+0x14>
 d9a:	95 0f       	add	r25, r21
 d9c:	50 e0       	ldi	r21, 0x00	; 0
 d9e:	55 1f       	adc	r21, r21
 da0:	62 9f       	mul	r22, r18
 da2:	f0 01       	movw	r30, r0
 da4:	72 9f       	mul	r23, r18
 da6:	bb 27       	eor	r27, r27
 da8:	f0 0d       	add	r31, r0
 daa:	b1 1d       	adc	r27, r1
 dac:	63 9f       	mul	r22, r19
 dae:	aa 27       	eor	r26, r26
 db0:	f0 0d       	add	r31, r0
 db2:	b1 1d       	adc	r27, r1
 db4:	aa 1f       	adc	r26, r26
 db6:	64 9f       	mul	r22, r20
 db8:	66 27       	eor	r22, r22
 dba:	b0 0d       	add	r27, r0
 dbc:	a1 1d       	adc	r26, r1
 dbe:	66 1f       	adc	r22, r22
 dc0:	82 9f       	mul	r24, r18
 dc2:	22 27       	eor	r18, r18
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	62 1f       	adc	r22, r18
 dca:	73 9f       	mul	r23, r19
 dcc:	b0 0d       	add	r27, r0
 dce:	a1 1d       	adc	r26, r1
 dd0:	62 1f       	adc	r22, r18
 dd2:	83 9f       	mul	r24, r19
 dd4:	a0 0d       	add	r26, r0
 dd6:	61 1d       	adc	r22, r1
 dd8:	22 1f       	adc	r18, r18
 dda:	74 9f       	mul	r23, r20
 ddc:	33 27       	eor	r19, r19
 dde:	a0 0d       	add	r26, r0
 de0:	61 1d       	adc	r22, r1
 de2:	23 1f       	adc	r18, r19
 de4:	84 9f       	mul	r24, r20
 de6:	60 0d       	add	r22, r0
 de8:	21 1d       	adc	r18, r1
 dea:	82 2f       	mov	r24, r18
 dec:	76 2f       	mov	r23, r22
 dee:	6a 2f       	mov	r22, r26
 df0:	11 24       	eor	r1, r1
 df2:	9f 57       	subi	r25, 0x7F	; 127
 df4:	50 40       	sbci	r21, 0x00	; 0
 df6:	8a f0       	brmi	.+34     	; 0xe1a <__mulsf3_pse+0x84>
 df8:	e1 f0       	breq	.+56     	; 0xe32 <__mulsf3_pse+0x9c>
 dfa:	88 23       	and	r24, r24
 dfc:	4a f0       	brmi	.+18     	; 0xe10 <__mulsf3_pse+0x7a>
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	bb 1f       	adc	r27, r27
 e04:	66 1f       	adc	r22, r22
 e06:	77 1f       	adc	r23, r23
 e08:	88 1f       	adc	r24, r24
 e0a:	91 50       	subi	r25, 0x01	; 1
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	a9 f7       	brne	.-22     	; 0xdfa <__mulsf3_pse+0x64>
 e10:	9e 3f       	cpi	r25, 0xFE	; 254
 e12:	51 05       	cpc	r21, r1
 e14:	70 f0       	brcs	.+28     	; 0xe32 <__mulsf3_pse+0x9c>
 e16:	14 c0       	rjmp	.+40     	; 0xe40 <__fp_inf>
 e18:	a6 cf       	rjmp	.-180    	; 0xd66 <__fp_szero>
 e1a:	5f 3f       	cpi	r21, 0xFF	; 255
 e1c:	ec f3       	brlt	.-6      	; 0xe18 <__mulsf3_pse+0x82>
 e1e:	98 3e       	cpi	r25, 0xE8	; 232
 e20:	dc f3       	brlt	.-10     	; 0xe18 <__mulsf3_pse+0x82>
 e22:	86 95       	lsr	r24
 e24:	77 95       	ror	r23
 e26:	67 95       	ror	r22
 e28:	b7 95       	ror	r27
 e2a:	f7 95       	ror	r31
 e2c:	e7 95       	ror	r30
 e2e:	9f 5f       	subi	r25, 0xFF	; 255
 e30:	c1 f7       	brne	.-16     	; 0xe22 <__mulsf3_pse+0x8c>
 e32:	fe 2b       	or	r31, r30
 e34:	88 0f       	add	r24, r24
 e36:	91 1d       	adc	r25, r1
 e38:	96 95       	lsr	r25
 e3a:	87 95       	ror	r24
 e3c:	97 f9       	bld	r25, 7
 e3e:	08 95       	ret

00000e40 <__fp_inf>:
 e40:	97 f9       	bld	r25, 7
 e42:	9f 67       	ori	r25, 0x7F	; 127
 e44:	80 e8       	ldi	r24, 0x80	; 128
 e46:	70 e0       	ldi	r23, 0x00	; 0
 e48:	60 e0       	ldi	r22, 0x00	; 0
 e4a:	08 95       	ret

00000e4c <__fp_nan>:
 e4c:	9f ef       	ldi	r25, 0xFF	; 255
 e4e:	80 ec       	ldi	r24, 0xC0	; 192
 e50:	08 95       	ret

00000e52 <__fp_pscA>:
 e52:	00 24       	eor	r0, r0
 e54:	0a 94       	dec	r0
 e56:	16 16       	cp	r1, r22
 e58:	17 06       	cpc	r1, r23
 e5a:	18 06       	cpc	r1, r24
 e5c:	09 06       	cpc	r0, r25
 e5e:	08 95       	ret

00000e60 <__fp_pscB>:
 e60:	00 24       	eor	r0, r0
 e62:	0a 94       	dec	r0
 e64:	12 16       	cp	r1, r18
 e66:	13 06       	cpc	r1, r19
 e68:	14 06       	cpc	r1, r20
 e6a:	05 06       	cpc	r0, r21
 e6c:	08 95       	ret

00000e6e <__fp_round>:
 e6e:	09 2e       	mov	r0, r25
 e70:	03 94       	inc	r0
 e72:	00 0c       	add	r0, r0
 e74:	11 f4       	brne	.+4      	; 0xe7a <__fp_round+0xc>
 e76:	88 23       	and	r24, r24
 e78:	52 f0       	brmi	.+20     	; 0xe8e <__fp_round+0x20>
 e7a:	bb 0f       	add	r27, r27
 e7c:	40 f4       	brcc	.+16     	; 0xe8e <__fp_round+0x20>
 e7e:	bf 2b       	or	r27, r31
 e80:	11 f4       	brne	.+4      	; 0xe86 <__fp_round+0x18>
 e82:	60 ff       	sbrs	r22, 0
 e84:	04 c0       	rjmp	.+8      	; 0xe8e <__fp_round+0x20>
 e86:	6f 5f       	subi	r22, 0xFF	; 255
 e88:	7f 4f       	sbci	r23, 0xFF	; 255
 e8a:	8f 4f       	sbci	r24, 0xFF	; 255
 e8c:	9f 4f       	sbci	r25, 0xFF	; 255
 e8e:	08 95       	ret

00000e90 <_exit>:
 e90:	f8 94       	cli

00000e92 <__stop_program>:
 e92:	ff cf       	rjmp	.-2      	; 0xe92 <__stop_program>
